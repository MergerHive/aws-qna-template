{
    "Resources": {
        "PreUpgradeExport": {
            "Type": "Custom::PreUpgradeExport",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "bucket": {
                    "Ref": "ExportBucket"
                },
                "id": "ExportAll_QnABot_v5.3.1.json",
                "index": {
                    "Fn::Sub": "${Var.QnaIndex}"
                },
                "encryption": {
                    "Ref": "Encryption"
                },
                "PRE_UPGRADE_EXPORT_TRIGGERS": {
                    "Fn::Sub": [
                        "${EmbeddingsApi} ${EmbeddingsLambdaDimensions} ${EmbeddingsLambdaArn} ${SMEmbeddingEndpoint}",
                        {
                            "SMEmbeddingEndpoint": {
                                "Fn::If": [
                                    "EmbeddingsSagemaker",
                                    {
                                        "Fn::GetAtt": [
                                            "SagemakerEmbeddingsStack",
                                            "Outputs.EmbeddingsSagemakerEndpoint"
                                        ]
                                    },
                                    ""
                                ]
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "27290f8f-4d57-4548-b850-055d5632ce4c"
                }
            }
        },
        "PreUpgradeExportMetrics": {
            "Type": "Custom::PreUpgradeExport",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "bucket": {
                    "Ref": "ExportBucket"
                },
                "id": "ExportAll_QnABot_v5.3.1_metrics.json",
                "index": {
                    "Fn::Sub": "${Var.MetricsIndex}"
                },
                "encryption": {
                    "Ref": "Encryption"
                },
                "PRE_UPGRADE_EXPORT_TRIGGERS": {
                    "Fn::Sub": [
                        "${EmbeddingsApi} ${EmbeddingsLambdaDimensions} ${EmbeddingsLambdaArn} ${SMEmbeddingEndpoint}",
                        {
                            "SMEmbeddingEndpoint": {
                                "Fn::If": [
                                    "EmbeddingsSagemaker",
                                    {
                                        "Fn::GetAtt": [
                                            "SagemakerEmbeddingsStack",
                                            "Outputs.EmbeddingsSagemakerEndpoint"
                                        ]
                                    },
                                    ""
                                ]
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f8c589fb-4c1a-4c51-a9da-2399817eab61"
                }
            }
        },
        "PreUpgradeExportFeedback": {
            "Type": "Custom::PreUpgradeExport",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "bucket": {
                    "Ref": "ExportBucket"
                },
                "id": "ExportAll_QnABot_v5.3.1_feedback.json",
                "index": {
                    "Fn::Sub": "${Var.FeedbackIndex}"
                },
                "encryption": {
                    "Ref": "Encryption"
                },
                "PRE_UPGRADE_EXPORT_TRIGGERS": {
                    "Fn::Sub": [
                        "${EmbeddingsApi} ${EmbeddingsLambdaDimensions} ${EmbeddingsLambdaArn} ${SMEmbeddingEndpoint}",
                        {
                            "SMEmbeddingEndpoint": {
                                "Fn::If": [
                                    "EmbeddingsSagemaker",
                                    {
                                        "Fn::GetAtt": [
                                            "SagemakerEmbeddingsStack",
                                            "Outputs.EmbeddingsSagemakerEndpoint"
                                        ]
                                    },
                                    ""
                                ]
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d4ba9b60-1d70-4dbc-833d-de60187a3983"
                }
            }
        },
        "AssetBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "5d23799b-4088-4179-a595-343b9e159fd2"
                }
            }
        },
        "HTTPSOnlyAssetBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "AssetBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "AssetBucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1ae4dd16-1189-4a2f-99e6-81a294b3338a"
                }
            }
        },
        "AssetClear": {
            "Type": "Custom::S3Clear",
            "DependsOn": [
                "CFNInvokePolicy"
            ],
            "Condition": "BuildExamples",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Ref": "AssetBucket"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "abe834e9-6c5e-4caf-a5f5-14c42b5caf36"
                }
            }
        },
        "AssetZipVersion": {
            "Condition": "BuildExamples",
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Join": [
                        "",
                        [
                            "qnabot-on-aws/v5.3.1",
                            "/assets.zip"
                        ]
                    ]
                },
                "BuildDate": "2023-03-15T17:43:20.334Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d86f03fc-94f9-4d82-bfbd-40ef651c586d"
                }
            }
        },
        "AssetUnzip": {
            "Type": "Custom::S3Unzip",
            "Condition": "BuildExamples",
            "DependsOn": [
                "AssetClear"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "SrcBucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Join": [
                        "",
                        [
                            "qnabot-on-aws/v5.3.1",
                            "/assets.zip"
                        ]
                    ]
                },
                "DstBucket": {
                    "Ref": "AssetBucket"
                },
                "version": {
                    "Ref": "AssetZipVersion"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "68ef1bc9-97eb-4cc4-9714-da7748c195cd"
                }
            }
        },
        "ExportBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "NoncurrentVersionExpirationInDays": 1,
                            "Status": "Enabled"
                        },
                        {
                            "AbortIncompleteMultipartUpload": {
                                "DaysAfterInitiation": 1
                            },
                            "Status": "Enabled"
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "GET"
                            ],
                            "AllowedOrigins": [
                                "*"
                            ]
                        }
                    ]
                },
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "f9ff417d-7c60-48d0-9118-63171d4bc371"
                }
            }
        },
        "HTTPSOnlyExportBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "ExportBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "ExportBucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cd89b9cb-6ad5-498b-967f-7eb8b7ea5089"
                }
            }
        },
        "ImportBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "ExpirationInDays": 1,
                            "Status": "Enabled"
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "PUT"
                            ],
                            "AllowedOrigins": [
                                "*"
                            ]
                        }
                    ]
                },
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "9229897d-88d9-4717-9898-6e4b8c37a2d7"
                }
            }
        },
        "HTTPSOnlyImportBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "ImportBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "ImportBucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c1d5df9a-6c16-421d-9c6a-a01cfc131567"
                }
            }
        },
        "TestAllBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "ExpirationInDays": 1,
                            "Status": "Enabled"
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "GET"
                            ],
                            "AllowedOrigins": [
                                "*"
                            ]
                        }
                    ]
                },
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "a6a768ae-b5ed-4a2e-b2a8-d0ace5ad867b"
                }
            }
        },
        "HTTPSOnlyTestAllBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "TestAllBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "TestAllBucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0f015e88-4d42-4a28-a79b-f87395d205b4"
                }
            }
        },
        "VersionLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n    if(event.RequestType!==\"Delete\"){\n        s3.headObject({\n            Bucket:event.ResourceProperties.Bucket,\n            Key:event.ResourceProperties.Key\n        }).promise()\n        .then(result=>send(event, context, SUCCESS,{\n            version:result.VersionId ? result.VersionId : 1\n        }))\n        .catch(x=>{\n            console.log(x)\n            send(event, context, FAILED)\n        })\n    }else{\n        send(event, context, SUCCESS)\n    }\n}\n\n\nconst SUCCESS = \"SUCCESS\";\nconst FAILED = \"FAILED\";\n\nfunction send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        context.done();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"send(..) failed executing https.request(..): \" + error);\n        context.done();\n    });\n\n    request.write(responseBody);\n    request.end();\n}\n"
                },
                "Handler": "index.handler",
                "MemorySize": "3008",
                "Role": {
                    "Fn::GetAtt": [
                        "CFNLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 60,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "CustomResource"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "903be98b-43af-4e66-8025-bfd4efb1a398"
                }
            }
        },
        "CFNVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "VersionLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/cfn.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.335Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2445dbdb-2b0b-4030-bb82-86c9378c3a75"
                }
            }
        },
        "CFNLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "",
                            [
                                "qnabot-on-aws/v5.3.1",
                                "/lambda/cfn.zip"
                            ]
                        ]
                    },
                    "S3ObjectVersion": {
                        "Fn::GetAtt": [
                            "CFNVersion",
                            "version"
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "3008",
                "Role": {
                    "Fn::GetAtt": [
                        "CFNLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 180,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "CustomResource"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "c2210951-cb46-4648-8ef5-4b9f392281d3"
                }
            }
        },
        "CFNInvokePolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "CFNLambda",
                                        "Arn"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CFNLambdaRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7b23f91e-1d6c-411e-83a5-95f2a1f4dd10"
                }
            }
        },
        "CognitoDomain": {
            "Type": "Custom::CognitoDomain",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "UserPool": {
                    "Ref": "UserPool"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1a290603-d345-441e-ae7c-f13caf40cba3"
                }
            }
        },
        "CognitoLoginClient": {
            "Type": "Custom::CognitoLogin",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "UserPool": {
                    "Ref": "UserPool"
                },
                "ClientId": {
                    "Ref": "ClientClient"
                },
                "LoginCallbackUrls": [
                    {
                        "Fn::GetAtt": [
                            "Urls",
                            "Client"
                        ]
                    }
                ],
                "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:#d3d3d3}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#f5f5f5;border:2px solid #d64958;color:#d64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{text-align:center}.passwordCheck-notValid-customizable{color:#df3312}.passwordCheck-valid-customizable{color:#19bf00}.background-customizable{background-color:#fff}"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "94e6ef2e-161b-4e48-88ab-c33d519e804f"
                }
            }
        },
        "CognitoLoginDesigner": {
            "Type": "Custom::CognitoLogin",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "UserPool": {
                    "Ref": "UserPool"
                },
                "ClientId": {
                    "Ref": "ClientDesigner"
                },
                "LoginCallbackUrls": [
                    {
                        "Fn::GetAtt": [
                            "Urls",
                            "Designer"
                        ]
                    }
                ],
                "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:#d3d3d3}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#f5f5f5;border:2px solid #d64958;color:#d64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{display:none;text-align:center}.passwordCheck-notValid-customizable{color:#df3312}.passwordCheck-valid-customizable{color:#19bf00}.background-customizable{background-color:#fff}"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fd7f0247-e3ad-49de-a8d4-68cf1bf2a63e"
                }
            }
        },
        "DesignerLogin": {
            "Type": "Custom::CognitoUrl",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "adad": "adaad",
                "ClientId": {
                    "Ref": "ClientDesigner"
                },
                "Domain": {
                    "Ref": "CognitoDomain"
                },
                "LoginRedirectUrl": {
                    "Fn::GetAtt": [
                        "Urls",
                        "Designer"
                    ]
                },
                "response_type": "code"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ccf64149-8acf-4eb6-825e-3c915e5cc3a5"
                }
            }
        },
        "ClientLogin": {
            "Type": "Custom::CognitoUrl",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "ClientId": {
                    "Ref": "ClientClient"
                },
                "Domain": {
                    "Ref": "CognitoDomain"
                },
                "LoginRedirectUrl": {
                    "Fn::GetAtt": [
                        "Urls",
                        "Client"
                    ]
                },
                "response_type": "token"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "93380540-e74f-4b74-9bbb-2bfbf6d0bac3"
                }
            }
        },
        "RoleAttachment": {
            "Type": "Custom::CognitoRole",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "IdentityPoolId": {
                    "Ref": "IdPool"
                },
                "Roles": {
                    "authenticated": {
                        "Fn::GetAtt": [
                            "UserRole",
                            "Arn"
                        ]
                    },
                    "unauthenticated": {
                        "Fn::GetAtt": [
                            "UnauthenticatedRole",
                            "Arn"
                        ]
                    }
                },
                "RoleMappings": [
                    {
                        "ClientId": {
                            "Ref": "ClientClient"
                        },
                        "UserPool": {
                            "Ref": "UserPool"
                        },
                        "Type": "Rules",
                        "AmbiguousRoleResolution": "AuthenticatedRole",
                        "RulesConfiguration": {
                            "Rules": [
                                {
                                    "Claim": "cognito:groups",
                                    "MatchType": "Contains",
                                    "Value": "Admin",
                                    "RoleARN": {
                                        "Fn::GetAtt": [
                                            "UserRole",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "ClientId": {
                            "Ref": "ClientDesigner"
                        },
                        "UserPool": {
                            "Ref": "UserPool"
                        },
                        "Type": "Rules",
                        "AmbiguousRoleResolution": "Deny",
                        "RulesConfiguration": {
                            "Rules": [
                                {
                                    "Claim": "cognito:groups",
                                    "MatchType": "Contains",
                                    "Value": "Admin",
                                    "RoleARN": {
                                        "Fn::GetAtt": [
                                            "AdminRole",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "152e3d83-fcc9-4ba9-995a-171ddb8e1516"
                }
            }
        },
        "DefaultUserPoolJwksUrl": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "Default QnABot Setting - DO NOT MODIFY",
                "Type": "String",
                "Value": {
                    "Fn::Join": [
                        "",
                        [
                            "https://cognito-idp.",
                            {
                                "Ref": "AWS::Region"
                            },
                            ".amazonaws.com/",
                            {
                                "Ref": "UserPool"
                            },
                            "/.well-known/jwks.json"
                        ]
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a5dd8880-bc8c-40c0-80fe-f217e0eb06af"
                }
            }
        },
        "DefaultQnABotSettings": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "Default QnABot Settings - DO NOT MODIFY",
                "Type": "String",
                "Value": {
                    "Fn::Sub": [
                        "{\"ENABLE_DEBUG_RESPONSES\":\"false\",\"ENABLE_DEBUG_LOGGING\":\"false\",\"ES_USE_KEYWORD_FILTERS\":\"${ES_USE_KEYWORD_FILTERS}\",\"ES_EXPAND_CONTRACTIONS\":\"{\\\"you're\\\":\\\"you are\\\",\\\"I'm\\\":\\\"I am\\\",\\\"can't\\\":\\\"cannot\\\"}\",\"ES_KEYWORD_SYNTAX_TYPES\":\"NOUN,PROPN,VERB,INTJ\",\"ES_SYNTAX_CONFIDENCE_LIMIT\":\".20\",\"ES_MINIMUM_SHOULD_MATCH\":\"2<75%\",\"ES_NO_HITS_QUESTION\":\"no_hits\",\"ES_USE_FUZZY_MATCH\":\"false\",\"ES_PHRASE_BOOST\":\"4\",\"ES_SCORE_ANSWER_FIELD\":\"false\",\"ENABLE_SENTIMENT_SUPPORT\":\"true\",\"ENABLE_MULTI_LANGUAGE_SUPPORT\":\"false\",\"ENABLE_CUSTOM_TERMINOLOGY\":\"false\",\"MINIMUM_CONFIDENCE_SCORE\":0.6,\"ALT_SEARCH_KENDRA_FALLBACK_CONFIDENCE_SCORE\":\"HIGH\",\"ALT_SEARCH_KENDRA_FAQ_CONFIDENCE_SCORE\":\"HIGH\",\"ALT_SEARCH_KENDRA_INDEXES\":\"${DefaultKendraIndexId}\",\"ALT_SEARCH_KENDRA_S3_SIGNED_URLS\":\"true\",\"ALT_SEARCH_KENDRA_S3_SIGNED_URL_EXPIRE_SECS\":300,\"ALT_SEARCH_KENDRA_MAX_DOCUMENT_COUNT\":2,\"ALT_SEARCH_KENDRA_TOP_ANSWER_MESSAGE\":\"Amazon Kendra suggested answer.\",\"ALT_SEARCH_KENDRA_FAQ_MESSAGE\":\"Answer from Amazon Kendra FAQ.\",\"ALT_SEARCH_KENDRA_ANSWER_MESSAGE\":\"While I did not find an exact answer, these search results from Amazon Kendra might be helpful.\",\"ALT_SEARCH_KENDRA_RESPONSE_TYPES\":\"ANSWER,DOCUMENT,QUESTION_ANSWER\",\"ALT_SEARCH_KENDRA_ABBREVIATE_MESSAGE_FOR_SSML\":\"true\",\"KENDRA_FAQ_INDEX\":\"${DefaultKendraIndexId}\",\"KENDRA_FAQ_CONFIG_MAX_RETRIES\":8,\"KENDRA_FAQ_CONFIG_RETRY_DELAY\":600,\"KENDRA_FAQ_ES_FALLBACK\":\"true\",\"ENABLE_KENDRA_WEB_INDEXER\":\"false\",\"KENDRA_INDEXER_URLS\":\"\",\"KENDRA_INDEXER_CRAWL_DEPTH\":3,\"KENDRA_INDEXER_CRAWL_MODE\":\"SUBDOMAINS\",\"KENDRA_INDEXER_SCHEDULE\":\"rate(1 day)\",\"KENDRA_WEB_PAGE_INDEX\":\"${DefaultKendraIndexId}\",\"KENDRA_INDEXED_DOCUMENTS_LANGUAGES\":\"en\",\"ERRORMESSAGE\":\"Unfortunately I encountered an error when searching for your answer. Please ask me again later.\",\"EMPTYMESSAGE\":\"You stumped me! Sadly I do not know how to answer your question.\",\"DEFAULT_ALEXA_LAUNCH_MESSAGE\":\"Hello, Please ask a question\",\"DEFAULT_ALEXA_REPROMPT\":\"Please either answer the question, ask another question or say Goodbye to end the conversation.\",\"DEFAULT_ALEXA_STOP_MESSAGE\":\"Goodbye\",\"SMS_HINT_REMINDER_ENABLE\":\"true\",\"SMS_HINT_REMINDER\":\" (Feedback? Reply THUMBS UP or THUMBS DOWN. Ask HELP ME at any time)\",\"SMS_HINT_REMINDER_INTERVAL_HRS\":\"24\",\"IDENTITY_PROVIDER_JWKS_URLS\":[],\"ENFORCE_VERIFIED_IDENTITY\":\"false\",\"NO_VERIFIED_IDENTITY_QUESTION\":\"no_verified_identity\",\"ELICIT_RESPONSE_MAX_RETRIES\":3,\"ELICIT_RESPONSE_RETRY_MESSAGE\":\"Please try again.\",\"ELICIT_RESPONSE_BOT_FAILURE_MESSAGE\":\"Your response was not understood. Please start again.\",\"ELICIT_RESPONSE_DEFAULT_MSG\":\"Ok. \",\"CONNECT_IGNORE_WORDS\":\"\",\"CONNECT_ENABLE_VOICE_RESPONSE_INTERRUPT\":\"false\",\"CONNECT_NEXT_PROMPT_VARNAME\":\"connect_nextPrompt\",\"ENABLE_REDACTING\":\"false\",\"REDACTING_REGEX\":\"\\\\b\\\\d{4}\\\\b(?![-])|\\\\b\\\\d{9}\\\\b|\\\\b\\\\d{3}-\\\\d{2}-\\\\d{4}\\\\b\",\"ENABLE_REDACTING_WITH_COMPREHEND\":\"false\",\"COMPREHEND_REDACTING_CONFIDENCE_SCORE\":0.99,\"COMPREHEND_REDACTING_ENTITY_TYPES\":\"ADDRESS,EMAIL,SSN,PHONE,PASSWORD,BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER\",\"PII_REJECTION_ENABLED\":false,\"PII_REJECTION_QUESTION\":\"pii_rejection_question\",\"PII_REJECTION_REGEX\":\"\\\\b\\\\d{4}\\\\b(?![-])|\\\\b\\\\d{9}\\\\b|\\\\b\\\\d{3}-\\\\d{2}-\\\\d{4}\\\\b\",\"PII_REJECTION_ENTITY_TYPES\":\"ADDRESS,EMAIL,SSN,PHONE,PASSWORD,BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER\",\"PII_REJECTION_CONFIDENCE_SCORE\":0.99,\"DISABLE_CLOUDWATCH_LOGGING\":\"false\",\"MINIMAL_ES_LOGGING\":\"false\",\"S3_PUT_REQUEST_ENCRYPTION\":\"\",\"BOT_ROUTER_WELCOME_BACK_MSG\":\"Welcome back to QnABot.\",\"BOT_ROUTER_EXIT_MSGS\":\"exit,quit,goodbye,leave\",\"RUN_LAMBDAHOOK_FROM_QUERY_STEP\":\"true\",\"LAMBDA_PREPROCESS_HOOK\":\"\",\"LAMBDA_POSTPROCESS_HOOK\":\"\",\"SEARCH_REPLACE_QUESTION_SUBSTRINGS\":\"\",\"EMBEDDINGS_ENABLE\":\"${EMBEDDINGS_ENABLE}\",\"EMBEDDINGS_SCORE_THRESHOLD\":0.85,\"EMBEDDINGS_SCORE_ANSWER_THRESHOLD\":0.8}",
                        {
                            "ES_USE_KEYWORD_FILTERS": {
                                "Fn::If": [
                                    "EmbeddingsEnable",
                                    "FALSE",
                                    "TRUE"
                                ]
                            },
                            "EMBEDDINGS_ENABLE": {
                                "Fn::If": [
                                    "EmbeddingsEnable",
                                    "TRUE",
                                    "FALSE"
                                ]
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d25d3b56-a6e5-49fd-bae0-4aa740789673"
                }
            }
        },
        "CustomQnABotSettings": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "Custom QnABot Settings - Modify to override defaults, or to add new settings",
                "Type": "String",
                "Value": "{}"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a70bc487-9856-47d8-a3eb-f9c9e048bb34"
                }
            }
        },
        "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "BillingMode": "PAY_PER_REQUEST",
                "PointInTimeRecoverySpecification": {
                    "PointInTimeRecoveryEnabled": true
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName": "UserId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "UserId",
                        "KeyType": "HASH"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W74",
                            "reason": "This DynamoDB table does not require CMK encryption store in KMS"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "486b5a7c-040d-4f4d-8676-65f516dfd609"
                }
            }
        },
        "OpensearchDomain": {
            "Type": "AWS::OpenSearchService::Domain",
            "DependsOn": [
                "PreUpgradeExport"
            ],
            "Condition": "CreateDomain",
            "Properties": {
                "ClusterConfig": {
                    "DedicatedMasterEnabled": false,
                    "InstanceCount": {
                        "Ref": "ElasticSearchNodeCount"
                    },
                    "InstanceType": {
                        "Fn::If": [
                            "Encrypted",
                            "m6g.large.search",
                            "t3.small.search"
                        ]
                    },
                    "ZoneAwarenessEnabled": {
                        "Fn::If": [
                            "SingleNode",
                            false,
                            true
                        ]
                    }
                },
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeSize": 10,
                    "VolumeType": "gp2"
                },
                "EngineVersion": "OpenSearch_1.3",
                "SnapshotOptions": {
                    "AutomatedSnapshotStartHour": "0"
                },
                "AdvancedOptions": {
                    "rest.action.multi.allow_explicit_index": "true"
                },
                "EncryptionAtRestOptions": {
                    "Enabled": {
                        "Fn::If": [
                            "Encrypted",
                            true,
                            false
                        ]
                    }
                },
                "NodeToNodeEncryptionOptions": {
                    "Enabled": {
                        "Fn::If": [
                            "Encrypted",
                            true,
                            false
                        ]
                    }
                },
                "DomainEndpointOptions": {
                    "EnforceHTTPS": {
                        "Fn::If": [
                            "Encrypted",
                            true,
                            false
                        ]
                    }
                },
                "VPCOptions": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ad31912d-949c-4ebf-a5ac-ded46573db01"
                }
            }
        },
        "OpensearchDomainUpdate": {
            "Type": "Custom::ElasticSearchUpdate",
            "DependsOn": [
                "CognitoDomain"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "DomainName": {
                    "Fn::GetAtt": [
                        "ESVar",
                        "ESDomain"
                    ]
                },
                "CognitoOptions": {
                    "Enabled": true,
                    "IdentityPoolId": {
                        "Ref": "KibanaIdPool"
                    },
                    "RoleArn": {
                        "Fn::GetAtt": [
                            "ESCognitoRole",
                            "Arn"
                        ]
                    },
                    "UserPoolId": {
                        "Ref": "UserPool"
                    }
                },
                "AccessPolicies": {
                    "Fn::Sub": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"CognitoAuth\",\"Principal\":{\"AWS\":\"${KibanaRole.Arn}\"},\"Effect\":\"Allow\",\"Action\":\"es:ESHttp*\",\"Resource\":\"${ESVar.ESArn}/*\"}]}"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "379117f3-8435-4e2a-afb5-273b5ee3c23c"
                }
            }
        },
        "ESCognitoRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "es.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AWSQnaBotESCognitoAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-idp:DescribeUserPool",
                                        "cognito-idp:CreateUserPoolClient",
                                        "cognito-idp:DeleteUserPoolClient",
                                        "cognito-idp:DescribeUserPoolClient",
                                        "cognito-idp:AdminInitiateAuth",
                                        "cognito-idp:AdminUserGlobalSignOut",
                                        "cognito-idp:ListUserPoolClients"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "UserPool",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-identity:DescribeIdentityPool",
                                        "cognito-identity:UpdateIdentityPool",
                                        "cognito-identity:GetIdentityPoolRoles"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-identity:SetIdentityPoolRoles"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "iam:PassRole",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
                                        }
                                    ],
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": "cognito-identity.amazonaws.com"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        },
                        {
                            "id": "F38",
                            "reason": "This role policy is required to have * action in its policy with PassRole action"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "91467aef-65f4-487c-b092-85af6913773d"
                }
            }
        },
        "ESInfo": {
            "Type": "Custom::ESProxy",
            "Condition": "DontCreateDomain",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "ESProxyLambda",
                        "Arn"
                    ]
                },
                "name": "EMPTY"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2918e8fb-5b18-41e8-ba2b-c14abeb9f72a"
                }
            }
        },
        "ESInfoLambda": {
            "Type": "AWS::Lambda::Function",
            "Condition": "DontCreateDomain",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar es=new aws.ES()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n\n    if(event.RequestType!==\"Delete\"){\n        es.describeElasticsearchDomain({\n            DomainName:event.ResourceProperties.name\n        }).promise()\n        .then(info=>{\n            send(event, context, SUCCESS,{\n                Name:DomainStatus.DomainName,\n                Arn:DomainStatus.ARN,\n                Endpoint:DomainStatus.Endpoints\n            })\n        })\n        .catch(x=>{\n            console.log(x)\n            send(event, context, FAILED)\n        })\n       \n    }else{\n        send(event, context, SUCCESS)\n    }\n}\n\n\nconst SUCCESS = \"SUCCESS\";\nconst FAILED = \"FAILED\";\n\nfunction send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        context.done();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"send(..) failed executing https.request(..): \" + error);\n        context.done();\n    });\n\n    request.write(responseBody);\n    request.end();\n}\n"
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "CustomResource"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "f8827275-5752-4821-85f2-6473d55a6ee4"
                }
            }
        },
        "FeedbackFirehose": {
            "Type": "AWS::KinesisFirehose::DeliveryStream",
            "Properties": {
                "DeliveryStreamType": "DirectPut",
                "DeliveryStreamEncryptionConfigurationInput": {
                    "KeyType": "AWS_OWNED_CMK"
                },
                "ElasticsearchDestinationConfiguration": {
                    "BufferingHints": {
                        "IntervalInSeconds": 60,
                        "SizeInMBs": 5
                    },
                    "DomainARN": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESArn"
                        ]
                    },
                    "IndexName": {
                        "Fn::Sub": "${Var.FeedbackIndex}"
                    },
                    "IndexRotationPeriod": "NoRotation",
                    "RetryOptions": {
                        "DurationInSeconds": 300
                    },
                    "RoleARN": {
                        "Fn::GetAtt": [
                            "FirehoseESS3Role",
                            "Arn"
                        ]
                    },
                    "S3BackupMode": "AllDocuments",
                    "S3Configuration": {
                        "BucketARN": {
                            "Fn::GetAtt": [
                                "MetricsBucket",
                                "Arn"
                            ]
                        },
                        "BufferingHints": {
                            "IntervalInSeconds": 60,
                            "SizeInMBs": 5
                        },
                        "Prefix": "feedback/",
                        "CompressionFormat": "UNCOMPRESSED",
                        "RoleARN": {
                            "Fn::GetAtt": [
                                "FirehoseESS3Role",
                                "Arn"
                            ]
                        }
                    },
                    "TypeName": "",
                    "VpcConfiguration": {
                        "Fn::If": [
                            "VPCEnabled",
                            {
                                "RoleARN": {
                                    "Fn::GetAtt": [
                                        "FirehoseESS3Role",
                                        "Arn"
                                    ]
                                },
                                "SubnetIds": [
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ],
                                "SecurityGroupIds": [
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "77ddff9a-5db6-4198-9cce-0e4f1a84cdc3"
                }
            }
        },
        "GeneralFirehose": {
            "Type": "AWS::KinesisFirehose::DeliveryStream",
            "Properties": {
                "DeliveryStreamType": "DirectPut",
                "DeliveryStreamEncryptionConfigurationInput": {
                    "KeyType": "AWS_OWNED_CMK"
                },
                "ElasticsearchDestinationConfiguration": {
                    "BufferingHints": {
                        "IntervalInSeconds": 60,
                        "SizeInMBs": 5
                    },
                    "DomainARN": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESArn"
                        ]
                    },
                    "IndexName": {
                        "Fn::Sub": "${Var.MetricsIndex}"
                    },
                    "IndexRotationPeriod": "NoRotation",
                    "RetryOptions": {
                        "DurationInSeconds": 300
                    },
                    "RoleARN": {
                        "Fn::GetAtt": [
                            "FirehoseESS3Role",
                            "Arn"
                        ]
                    },
                    "S3BackupMode": "AllDocuments",
                    "S3Configuration": {
                        "BucketARN": {
                            "Fn::GetAtt": [
                                "MetricsBucket",
                                "Arn"
                            ]
                        },
                        "Prefix": "metrics/",
                        "BufferingHints": {
                            "IntervalInSeconds": 60,
                            "SizeInMBs": 5
                        },
                        "CompressionFormat": "UNCOMPRESSED",
                        "RoleARN": {
                            "Fn::GetAtt": [
                                "FirehoseESS3Role",
                                "Arn"
                            ]
                        }
                    },
                    "TypeName": "",
                    "VpcConfiguration": {
                        "Fn::If": [
                            "VPCEnabled",
                            {
                                "RoleARN": {
                                    "Fn::GetAtt": [
                                        "FirehoseESS3Role",
                                        "Arn"
                                    ]
                                },
                                "SubnetIds": [
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ],
                                "SecurityGroupIds": [
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9428dafe-e244-4060-ab1a-b4666f287458"
                }
            }
        },
        "MetricsBucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Delete",
            "Properties": {
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                },
                "Tags": [
                    {
                        "Key": "Use",
                        "Value": "Metrics"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "5f8be794-e72d-427c-9826-d01d35387393"
                }
            }
        },
        "HTTPSOnlyMetricBucketsPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "MetricsBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "MetricsBucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "bc162986-4ac6-4133-8e5e-84d173060579"
                }
            }
        },
        "MetricsBucketClear": {
            "Type": "Custom::S3Clear",
            "DependsOn": [
                "CFNInvokePolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Ref": "MetricsBucket"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "11d1a7d3-96dc-4694-8c44-baf33fd31d28"
                }
            }
        },
        "FirehoseESS3Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "firehose.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:AbortMultipartUpload",
                                        "s3:GetBucketLocation",
                                        "s3:GetObject",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:PutObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "MetricsBucket",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "MetricsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Sid": "",
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction",
                                        "lambda:GetFunctionConfiguration"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:lambda:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Sid": "",
                                    "Effect": "Allow",
                                    "Action": [
                                        "es:DescribeElasticsearchDomain",
                                        "es:DescribeElasticsearchDomains",
                                        "es:DescribeElasticsearchDomainConfig",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut",
                                        "es:ESHttpGet"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "ESVar",
                                                "ESArn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "ESVar",
                                                            "ESArn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Sid": "",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:logs:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":log-group:/aws/kinesisfirehose/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Sid": "",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeVpcAttribute",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:CreateNetworkInterfacePermission",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "QnAFirehose"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "3ca9ddfe-6aea-463f-a520-88fdb0a7b93a"
                }
            }
        },
        "ESCFNProxyLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Environment": {
                    "Variables": {
                        "DEFAULT_SETTINGS_PARAM": {
                            "Ref": "DefaultQnABotSettings"
                        },
                        "CUSTOM_SETTINGS_PARAM": {
                            "Ref": "CustomQnABotSettings"
                        }
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "CfnLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Handler": "resource.handler",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "CustomResource"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "0be66d5c-df14-49d4-a84e-72d19a97c6d1"
                }
            }
        },
        "MetricsIndex": {
            "Type": "Custom::ESProxy",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "ESCFNProxyLambda",
                        "Arn"
                    ]
                },
                "create": {
                    "index": {
                        "Fn::Sub": "${Var.MetricsIndex}"
                    },
                    "endpoint": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "body": {
                        "Fn::Sub": "{\"settings\":{\"index.mapping.total_fields.limit\":2000}}"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d527f0c6-a588-424f-a0ca-deef30a3972c"
                }
            }
        },
        "FeedbackIndex": {
            "Type": "Custom::ESProxy",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "ESCFNProxyLambda",
                        "Arn"
                    ]
                },
                "create": {
                    "index": {
                        "Fn::Sub": "${Var.FeedbackIndex}"
                    },
                    "endpoint": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "body": {
                        "Fn::Sub": "{\"settings\":{}}"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ef1a00f4-764c-43b4-bc60-4e1a28ee6f85"
                }
            }
        },
        "Index": {
            "Type": "Custom::ESProxy",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "ESCFNProxyLambda",
                        "Arn"
                    ]
                },
                "create": {
                    "index": {
                        "Fn::Sub": "${Var.QnaIndex}"
                    },
                    "endpoint": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "body": {
                        "Fn::Sub": [
                            "{\"settings\":{\"number_of_shards\":\"1\",\"index.knn\":true,\"analysis\":{\"filter\":{\"english_stop\":{\"type\":\"stop\",\"stopwords\":[\"a\",\"an\",\"and\",\"are\",\"as\",\"at\",\"be\",\"but\",\"by\",\"for\",\"if\",\"in\",\"into\",\"is\",\"it\",\"not\",\"of\",\"on\",\"or\",\"such\",\"that\",\"the\",\"their\",\"then\",\"there\",\"these\",\"they\",\"this\",\"to\",\"was\",\"will\",\"with\"]},\"english_keywords\":{\"type\":\"keyword_marker\",\"keywords\":[\"example\"]},\"english_stemmer\":{\"type\":\"stemmer\",\"language\":\"english\"},\"english_possessive_stemmer\":{\"type\":\"stemmer\",\"language\":\"possessive_english\"}},\"analyzer\":{\"custom_english\":{\"type\":\"custom\",\"tokenizer\":\"standard\",\"filter\":[\"english_possessive_stemmer\",\"lowercase\",\"english_stop\",\"english_keywords\",\"english_stemmer\"]},\"custom_english_unique\":{\"type\":\"custom\",\"tokenizer\":\"standard\",\"filter\":[\"english_possessive_stemmer\",\"lowercase\",\"english_stop\",\"english_keywords\",\"english_stemmer\",\"unique\"]}}}},\"mappings\":{\"properties\":{\"qid\":{\"type\":\"keyword\"},\"quniqueterms\":{\"type\":\"text\",\"analyzer\":\"custom_english_unique\"},\"questions\":{\"type\":\"nested\",\"properties\":{\"q\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"q_vector\":{\"type\":\"knn_vector\",\"dimension\":\"${EmbeddingsDimensions}\",\"method\":{\"name\":\"hnsw\",\"space_type\":\"cosinesimil\",\"engine\":\"nmslib\"}}}},\"a\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"a_vector\":{\"type\":\"knn_vector\",\"dimension\":\"${EmbeddingsDimensions}\",\"method\":{\"name\":\"hnsw\",\"space_type\":\"cosinesimil\",\"engine\":\"nmslib\"}},\"t\":{\"type\":\"text\",\"analyzer\":\"whitespace\"},\"r\":{\"properties\":{\"imageUrl\":{\"type\":\"keyword\"},\"title\":{\"type\":\"text\"}}},\"l\":{\"type\":\"keyword\"},\"question\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"incorrectAnswers\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"correctAnswers\":{\"type\":\"text\",\"analyzer\":\"custom_english\"}}}}",
                            {
                                "EmbeddingsDimensions": {
                                    "Fn::If": [
                                        "EmbeddingsEnable",
                                        {
                                            "Fn::If": [
                                                "EmbeddingsSagemaker",
                                                "1024",
                                                {
                                                    "Fn::If": [
                                                        "EmbeddingsLambda",
                                                        {
                                                            "Ref": "EmbeddingsLambdaDimensions"
                                                        },
                                                        "INVALID EMBEDDINGS API - Cannot determine dimensions"
                                                    ]
                                                }
                                            ]
                                        },
                                        "1"
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2e3733c1-ab6c-44e7-8828-1fc64cbbecbe"
                }
            }
        },
        "ExamplesStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "BuildExamples",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://solutions-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/qnabot-on-aws/v5.3.1/templates/examples.json"
                },
                "Parameters": {
                    "QnAType": {
                        "Fn::GetAtt": [
                            "Var",
                            "QnAType"
                        ]
                    },
                    "QuizType": {
                        "Fn::GetAtt": [
                            "Var",
                            "QuizType"
                        ]
                    },
                    "Index": {
                        "Fn::GetAtt": [
                            "Var",
                            "QnaIndex"
                        ]
                    },
                    "ESAddress": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "BootstrapBucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "BootstrapPrefix": "qnabot-on-aws/v5.3.1",
                    "FeedbackFirehose": {
                        "Fn::GetAtt": [
                            "FeedbackFirehose",
                            "Arn"
                        ]
                    },
                    "FeedbackFirehoseName": {
                        "Ref": "FeedbackFirehose"
                    },
                    "CFNLambda": {
                        "Fn::GetAtt": [
                            "CFNLambda",
                            "Arn"
                        ]
                    },
                    "CFNLambdaRole": {
                        "Fn::GetAtt": [
                            "CFNLambdaRole",
                            "Arn"
                        ]
                    },
                    "ApiUrlName": {
                        "Fn::GetAtt": [
                            "ApiUrl",
                            "Name"
                        ]
                    },
                    "AssetBucket": {
                        "Ref": "AssetBucket"
                    },
                    "FulfillmentLambdaRole": {
                        "Ref": "FulfillmentLambdaRole"
                    },
                    "QIDLambdaArn": {
                        "Fn::GetAtt": [
                            "ESQidLambda",
                            "Arn"
                        ]
                    },
                    "VPCSubnetIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "VPCSecurityGroupIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "LexBotVersion": {
                        "Ref": "LexBotVersion"
                    },
                    "XraySetting": {
                        "Ref": "XraySetting"
                    },
                    "DefaultQnABotSettings": {
                        "Ref": "DefaultQnABotSettings"
                    },
                    "InstallLexResponseBots": {
                        "Ref": "InstallLexResponseBots"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1de15630-14cd-438b-966d-7b470189afa6"
                }
            }
        },
        "ExportStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://solutions-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/qnabot-on-aws/v5.3.1/templates/export.json"
                },
                "Parameters": {
                    "CFNLambda": {
                        "Fn::GetAtt": [
                            "CFNLambda",
                            "Arn"
                        ]
                    },
                    "CFNInvokePolicy": {
                        "Ref": "CFNInvokePolicy"
                    },
                    "BootstrapBucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "BootstrapPrefix": "qnabot-on-aws/v5.3.1",
                    "VarIndex": {
                        "Fn::GetAtt": [
                            "Var",
                            "QnaIndex"
                        ]
                    },
                    "EsEndpoint": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "EsProxyLambda": {
                        "Fn::GetAtt": [
                            "ESProxyLambda",
                            "Arn"
                        ]
                    },
                    "ExportBucket": {
                        "Ref": "ExportBucket"
                    },
                    "VPCSubnetIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "VPCSecurityGroupIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "XraySetting": {
                        "Ref": "XraySetting"
                    },
                    "Api": {
                        "Ref": "API"
                    },
                    "ApiRootResourceId": {
                        "Fn::GetAtt": [
                            "API",
                            "RootResourceId"
                        ]
                    },
                    "Encryption": {
                        "Ref": "Encryption"
                    },
                    "Stage": {
                        "Ref": "Stage"
                    },
                    "ApiDeploymentId": {
                        "Ref": "Deployment"
                    },
                    "KendraCrawlerSnsTopic": {
                        "Ref": "KendraCrawlerSnsTopic"
                    },
                    "DefaultQnABotSettings": {
                        "Ref": "DefaultQnABotSettings"
                    },
                    "CustomQnABotSettings": {
                        "Ref": "CustomQnABotSettings"
                    },
                    "QnABotCommonLambdaLayer": {
                        "Ref": "QnABotCommonLambdaLayer"
                    },
                    "LexVersion": {
                        "Fn::If": [
                            "CreateLexV1Bots",
                            "V1",
                            "V2"
                        ]
                    },
                    "FallbackIntent": {
                        "Fn::If": [
                            "CreateLexV1Bots",
                            {
                                "Ref": "IntentFallback"
                            },
                            "LexV2Only_Mode"
                        ]
                    },
                    "Intent": {
                        "Fn::If": [
                            "CreateLexV1Bots",
                            {
                                "Ref": "Intent"
                            },
                            "LexV2Only_Mode"
                        ]
                    },
                    "BotName": {
                        "Fn::If": [
                            "CreateLexV1Bots",
                            {
                                "Ref": "LexBot"
                            },
                            "LexV2Only_Mode"
                        ]
                    },
                    "LexV2BotName": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botName"
                        ]
                    },
                    "LexV2BotId": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botId"
                        ]
                    },
                    "LexV2BotAlias": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botAlias"
                        ]
                    },
                    "LexV2BotAliasId": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botAliasId"
                        ]
                    },
                    "LexV2BotLocaleIds": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botLocaleIds"
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "145d25ce-e4ce-4689-a1c5-209b934665b3"
                }
            }
        },
        "ImportStack": {
            "Type": "AWS::CloudFormation::Stack",
            "DependsOn": [
                "PreUpgradeExport",
                "OpensearchDomainUpdate"
            ],
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://solutions-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/qnabot-on-aws/v5.3.1/templates/import.json"
                },
                "Parameters": {
                    "CFNLambda": {
                        "Fn::GetAtt": [
                            "CFNLambda",
                            "Arn"
                        ]
                    },
                    "CFNInvokePolicy": {
                        "Ref": "CFNInvokePolicy"
                    },
                    "BootstrapBucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "BootstrapPrefix": "qnabot-on-aws/v5.3.1",
                    "EsEndpoint": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "EsArn": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESArn"
                        ]
                    },
                    "EsProxyLambda": {
                        "Fn::GetAtt": [
                            "ESProxyLambda",
                            "Arn"
                        ]
                    },
                    "ImportBucket": {
                        "Ref": "ImportBucket"
                    },
                    "ExportBucket": {
                        "Ref": "ExportBucket"
                    },
                    "VarIndex": {
                        "Fn::GetAtt": [
                            "Var",
                            "QnaIndex"
                        ]
                    },
                    "MetricsIndex": {
                        "Fn::GetAtt": [
                            "Var",
                            "MetricsIndex"
                        ]
                    },
                    "FeedbackIndex": {
                        "Fn::GetAtt": [
                            "Var",
                            "FeedbackIndex"
                        ]
                    },
                    "DefaultQnABotSettings": {
                        "Ref": "DefaultQnABotSettings"
                    },
                    "CustomQnABotSettings": {
                        "Ref": "CustomQnABotSettings"
                    },
                    "Encryption": {
                        "Ref": "Encryption"
                    },
                    "VPCSubnetIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "VPCSecurityGroupIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "XraySetting": {
                        "Ref": "XraySetting"
                    },
                    "AwsSdkLayerLambdaLayer": {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    "CommonModulesLambdaLayer": {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    "EsProxyLambdaLayer": {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    "QnABotCommonLambdaLayer": {
                        "Ref": "QnABotCommonLambdaLayer"
                    },
                    "EmbeddingsLambdaArn": {
                        "Ref": "EmbeddingsLambdaArn"
                    },
                    "EmbeddingsApi": {
                        "Ref": "EmbeddingsApi"
                    },
                    "EmbeddingsLambdaDimensions": {
                        "Ref": "EmbeddingsLambdaDimensions"
                    },
                    "EmbeddingsSagemakerEndpoint": {
                        "Fn::If": [
                            "EmbeddingsSagemaker",
                            {
                                "Fn::GetAtt": [
                                    "SagemakerEmbeddingsStack",
                                    "Outputs.EmbeddingsSagemakerEndpoint"
                                ]
                            },
                            ""
                        ]
                    },
                    "EmbeddingsSagemakerEndpointArn": {
                        "Fn::If": [
                            "EmbeddingsSagemaker",
                            {
                                "Fn::GetAtt": [
                                    "SagemakerEmbeddingsStack",
                                    "Outputs.EmbeddingsSagemakerEndpointArn"
                                ]
                            },
                            ""
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1b338411-97c5-44fb-a9c6-b96c6532964d"
                }
            }
        },
        "KendraCrawlerSnsTopic": {
            "Type": "AWS::SNS::Topic",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W47",
                            "reason": "This SNS Topic does not need KmsMasterKeyId property."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "c44b68bc-a871-4fcd-878f-beb27d300e94"
                }
            }
        },
        "CommonModulesLayerCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/common-modules-layer.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.558Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "06e536ce-9fda-47db-a459-bc990df41330"
                }
            }
        },
        "CommonModulesLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
                "LayerName": {
                    "Fn::Join": [
                        "-",
                        [
                            "CommonModules",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "DefaultQnABotSettings"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Content": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/common-modules-layer.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "CommonModulesLayerCodeVersion"
                    }
                },
                "CompatibleRuntimes": [
                    "nodejs16.x"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "61a7ac2d-fd47-4eeb-9763-5a84553d5b6c"
                }
            }
        },
        "QnABotCommonLayerCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/qnabot-common-layer.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.558Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d8c5cfe8-48bd-4f29-b8e8-685866f0f702"
                }
            }
        },
        "QnABotCommonLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
                "LayerName": {
                    "Fn::Join": [
                        "-",
                        [
                            "QnABotCommon",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "DefaultQnABotSettings"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Content": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/qnabot-common-layer.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "QnABotCommonLayerCodeVersion"
                    }
                },
                "CompatibleRuntimes": [
                    "nodejs16.x"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3300f8e6-33cc-4493-a53b-31984fdab1af"
                }
            }
        },
        "AwsSdkLayerCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/aws-sdk-layer.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.558Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "aab9d408-f986-4eac-9163-7610594afa4c"
                }
            }
        },
        "AwsSdkLayerLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
                "Content": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/aws-sdk-layer.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "AwsSdkLayerCodeVersion"
                    }
                },
                "LayerName": {
                    "Fn::Join": [
                        "-",
                        [
                            "AwsSdk",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "DefaultQnABotSettings"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "CompatibleRuntimes": [
                    "nodejs16.x"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fd166669-969a-4842-aeb4-5391ddccca42"
                }
            }
        },
        "CfnLambdaLayerCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/cfn-lambda-layer.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.558Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "508313fe-7473-4473-8bb5-2f27954215f5"
                }
            }
        },
        "CfnLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
                "LayerName": {
                    "Fn::Join": [
                        "-",
                        [
                            "CfnLambdaModule",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "DefaultQnABotSettings"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Content": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/cfn-lambda-layer.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "CfnLambdaLayerCodeVersion"
                    }
                },
                "CompatibleRuntimes": [
                    "nodejs16.x"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ce7af09f-7679-4fe5-8a30-20056c783fef"
                }
            }
        },
        "EsProxyLayerCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/es-proxy-layer.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.558Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f36d1f49-46cf-4a6f-8d4b-f6365172a6cd"
                }
            }
        },
        "EsProxyLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
                "LayerName": {
                    "Fn::Join": [
                        "-",
                        [
                            "EsProxy",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "DefaultQnABotSettings"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Content": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/es-proxy-layer.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "EsProxyLayerCodeVersion"
                    }
                },
                "CompatibleRuntimes": [
                    "nodejs16.x"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "26553302-68ab-4395-a8d3-abbb5798d9d2"
                }
            }
        },
        "QNAInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": "FulfillmentLambdaAliaslive",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Fn::GetAtt": [
                                    "FulfillmentLambda",
                                    "Arn"
                                ]
                            },
                            "live"
                        ]
                    ]
                },
                "Principal": "lex.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cc32ab59-ae32-400e-bb2b-836367ca2290"
                }
            }
        },
        "SlotType": {
            "Type": "Custom::LexSlotType",
            "Condition": "CreateLexV1Bots",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "createVersion": true,
                "description": "custom slot type 5.3.1 - v1",
                "enumerationValues": [
                    {
                        "value": "dummy utterance"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b20ad570-2cbb-40d8-b5d2-180a6fb979c4"
                }
            }
        },
        "Intent": {
            "Type": "Custom::LexIntent",
            "Condition": "CreateLexV1Bots",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "prefix": "fulfilment",
                "description": "custom intent 5.3.1 - v1",
                "createVersion": true,
                "sampleUtterances": [
                    "{slot}"
                ],
                "slots": [
                    {
                        "name": "slot",
                        "slotType": {
                            "Ref": "SlotType"
                        },
                        "slotConstraint": "Optional",
                        "slotTypeVersion": "QNABOT-AUTO-ASSIGNED",
                        "priority": 1
                    }
                ],
                "fulfillmentActivity": {
                    "type": "CodeHook",
                    "codeHook": {
                        "uri": {
                            "Fn::Join": [
                                ":",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "FulfillmentLambda",
                                            "Arn"
                                        ]
                                    },
                                    "live"
                                ]
                            ]
                        },
                        "messageVersion": "1.0"
                    }
                }
            },
            "DependsOn": "QNAInvokePermission",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "344ca0ac-be91-4b23-8d57-f84783748407"
                }
            }
        },
        "IntentFallback": {
            "Type": "Custom::LexIntent",
            "Condition": "CreateLexV1Bots",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "prefix": "qnabotfallbackfulfilment",
                "description": "custom fallback intent 5.3.1 - v1",
                "createVersion": true,
                "fulfillmentActivity": {
                    "type": "CodeHook",
                    "codeHook": {
                        "uri": {
                            "Fn::Join": [
                                ":",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "FulfillmentLambda",
                                            "Arn"
                                        ]
                                    },
                                    "live"
                                ]
                            ]
                        },
                        "messageVersion": "1.0"
                    }
                },
                "parentIntentSignature": "AMAZON.FallbackIntent"
            },
            "DependsOn": "QNAInvokePermission",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ef68d184-ac52-4702-9e66-f1b2dc3c996e"
                }
            }
        },
        "LexBot": {
            "Type": "Custom::LexBot",
            "Condition": "CreateLexV1Bots",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "name": {
                    "Fn::Sub": "${AWS::StackName}-Bot"
                },
                "description": "QnABot primary bot 5.3.1 - v1",
                "locale": "en-US",
                "voiceId": "Joanna",
                "childDirected": false,
                "createVersion": true,
                "intents": [
                    {
                        "intentName": {
                            "Ref": "Intent"
                        }
                    },
                    {
                        "intentName": {
                            "Ref": "IntentFallback"
                        }
                    }
                ],
                "abortStatement": {
                    "messages": [
                        {
                            "content": "Sorry, I did not understand that",
                            "contentType": "PlainText"
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "edb606ab-4216-41f2-a927-a1c0faf21d27"
                }
            }
        },
        "VersionAlias": {
            "Type": "Custom::LexAlias",
            "Condition": "CreateLexV1Bots",
            "DependsOn": "LexBot",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "botName": {
                    "Ref": "LexBot"
                },
                "name": "live",
                "description": "QnABot live alias 5.3.1 - v1"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f4449756-e71c-4763-8f09-c86102742d2f"
                }
            }
        },
        "LexV2Bot": {
            "Type": "Custom::LexV2Bot",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "Lexv2BotLambda",
                        "Arn"
                    ]
                },
                "description": "QnABot LexV2 Bot5.3.1 - v1",
                "BuildDate": "2023-03-15T17:43:20.559Z",
                "localIds": {
                    "Ref": "LexV2BotLocaleIds"
                },
                "utterances": [
                    "dummy utterance"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "de6479b0-82c0-4376-99e1-8d0cc68a0efb"
                }
            }
        },
        "Alexa": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": "FulfillmentLambdaAliaslive",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Fn::GetAtt": [
                                    "FulfillmentLambda",
                                    "Arn"
                                ]
                            },
                            "live"
                        ]
                    ]
                },
                "Principal": "alexa-appkit.amazon.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8dba156f-7653-4c1f-aeca-ae0964cc60d6"
                }
            }
        },
        "FulfillmentCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/fulfillment.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.576Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8102d47e-64ee-4ac3-911f-24cee1169f32"
                }
            }
        },
        "FulfillmentLambda": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "FulfillmentCodeVersion",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/fulfillment.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "FulfillmentCodeVersion"
                    }
                },
                "Environment": {
                    "Variables": {
                        "ES_TYPE": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnAType"
                            ]
                        },
                        "ES_INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnaIndex"
                            ]
                        },
                        "ES_ADDRESS": {
                            "Fn::GetAtt": [
                                "ESVar",
                                "ESAddress"
                            ]
                        },
                        "LAMBDA_DEFAULT_QUERY": {
                            "Ref": "ESQueryLambda"
                        },
                        "LAMBDA_LOG": {
                            "Ref": "ESLoggingLambda"
                        },
                        "ES_SERVICE_QID": {
                            "Ref": "ESQidLambda"
                        },
                        "ES_SERVICE_PROXY": {
                            "Ref": "ESProxyLambda"
                        },
                        "DYNAMODB_USERSTABLE": {
                            "Ref": "UsersTable"
                        },
                        "DEFAULT_USER_POOL_JWKS_PARAM": {
                            "Ref": "DefaultUserPoolJwksUrl"
                        },
                        "DEFAULT_SETTINGS_PARAM": {
                            "Ref": "DefaultQnABotSettings"
                        },
                        "CUSTOM_SETTINGS_PARAM": {
                            "Ref": "CustomQnABotSettings"
                        },
                        "EMBEDDINGS_API": {
                            "Ref": "EmbeddingsApi"
                        },
                        "EMBEDDINGS_SAGEMAKER_ENDPOINT": {
                            "Fn::If": [
                                "EmbeddingsSagemaker",
                                {
                                    "Fn::GetAtt": [
                                        "SagemakerEmbeddingsStack",
                                        "Outputs.EmbeddingsSagemakerEndpoint"
                                    ]
                                },
                                ""
                            ]
                        },
                        "EMBEDDINGS_SAGEMAKER_INSTANCECOUNT": {
                            "Ref": "SagemakerInitialInstanceCount"
                        },
                        "EMBEDDINGS_LAMBDA_ARN": {
                            "Ref": "EmbeddingsLambdaArn"
                        },
                        "ExampleJSLambdaQuiz": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExampleJSLambdaQuiz"
                            ]
                        },
                        "ExampleJSLambdahook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExampleJSLambdahook"
                            ]
                        },
                        "ExamplePYTHONLambdaBotBroker": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaBotBroker"
                            ]
                        },
                        "ExamplePYTHONLambdaConnectCallback": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaConnectCallback"
                            ]
                        },
                        "ExamplePYTHONLambdaFeedback": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaFeedback"
                            ]
                        },
                        "ExamplePYTHONLambdaNext": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaNext"
                            ]
                        },
                        "ExamplePYTHONLambdaPrevious": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaPrevious"
                            ]
                        },
                        "ExamplePYTHONLambdahello": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdahello"
                            ]
                        },
                        "EXTCreateRecentTopicsResponse": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCreateRecentTopicsResponse"
                            ]
                        },
                        "EXTCustomJSHook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCustomJSHook"
                            ]
                        },
                        "EXTCanvasLMSHook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCanvasLMSHook"
                            ]
                        },
                        "EXTCustomPYHook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCustomPYHook"
                            ]
                        },
                        "QNAWage": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAWage"
                            ]
                        },
                        "QNASocialSecurity": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNASocialSecurity"
                            ]
                        },
                        "QNAPinNoConfirm": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAPinNoConfirm"
                            ]
                        },
                        "QNAPin": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAPin"
                            ]
                        },
                        "QNAYesNo": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAYesNo"
                            ]
                        },
                        "QNAYesNoExit": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAYesNoExit"
                            ]
                        },
                        "QNADate": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNADate"
                            ]
                        },
                        "QNADateNoConfirm": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNADateNoConfirm"
                            ]
                        },
                        "QNADayOfWeek": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNADayOfWeek"
                            ]
                        },
                        "QNAMonth": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAMonth"
                            ]
                        },
                        "QNAMonthNoConfirm": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAMonthNoConfirm"
                            ]
                        },
                        "QNANumber": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNANumber"
                            ]
                        },
                        "QNANumberNoConfirm": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNANumberNoConfirm"
                            ]
                        },
                        "QNAAge": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAAge"
                            ]
                        },
                        "QNAAgeNoConfirm": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAAgeNoConfirm"
                            ]
                        },
                        "QNAPhoneNumber": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAPhoneNumber"
                            ]
                        },
                        "QNAPhoneNumberNoConfirm": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAPhoneNumberNoConfirm"
                            ]
                        },
                        "QNATime": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNATime"
                            ]
                        },
                        "QNAEmailAddress": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAEmailAddress"
                            ]
                        },
                        "QNAName": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.QNAName"
                            ]
                        }
                    }
                },
                "Handler": "index.handler",
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "MemorySize": 1408,
                "Role": {
                    "Fn::GetAtt": [
                        "FulfillmentLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "TracingConfig": {
                    "Mode": {
                        "Fn::If": [
                            "XRAYEnabled",
                            "Active",
                            "PassThrough"
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Fulfillment"
                    }
                ],
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "This Lambda Function is not required to be inside VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "d3b55f54-600d-4897-ace3-282dbc76e9af"
                }
            }
        },
        "FulfillmentLambdaVersionGenerator": {
            "Type": "Custom::LambdaVersion",
            "DeletionPolicy": "Retain",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "FunctionName": {
                    "Ref": "FulfillmentLambda"
                },
                "Triggers": {
                    "FulfillmentCodeVersionTrigger": [
                        {
                            "Ref": "FulfillmentCodeVersion"
                        }
                    ],
                    "LayersTrigger": [
                        {
                            "Ref": "AwsSdkLayerLambdaLayer"
                        },
                        {
                            "Ref": "CommonModulesLambdaLayer"
                        },
                        {
                            "Ref": "EsProxyLambdaLayer"
                        },
                        {
                            "Ref": "QnABotCommonLambdaLayer"
                        }
                    ],
                    "EmbeddingsTrigger": [
                        {
                            "Ref": "EmbeddingsApi"
                        },
                        {
                            "Ref": "SagemakerInitialInstanceCount"
                        },
                        {
                            "Fn::If": [
                                "EmbeddingsSagemaker",
                                {
                                    "Fn::GetAtt": [
                                        "SagemakerEmbeddingsStack",
                                        "Outputs.EmbeddingsSagemakerEndpoint"
                                    ]
                                },
                                ""
                            ]
                        },
                        {
                            "Ref": "EmbeddingsLambdaArn"
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d85e75a6-0095-4144-a69c-9ecc254e70df"
                }
            }
        },
        "FulfillmentLambdaAliaslive": {
            "Type": "AWS::Lambda::Alias",
            "DependsOn": "FulfillmentLambdaVersionGenerator",
            "Properties": {
                "FunctionName": {
                    "Ref": "FulfillmentLambda"
                },
                "FunctionVersion": {
                    "Fn::GetAtt": [
                        "FulfillmentLambdaVersionGenerator",
                        "Version"
                    ]
                },
                "Name": "live",
                "ProvisionedConcurrencyConfig": {
                    "Fn::If": [
                        "CreateConcurrency",
                        {
                            "ProvisionedConcurrentExecutions": {
                                "Ref": "FulfillmentConcurrency"
                            }
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6ac6a4f4-7129-4214-b51d-16fff7f7ef6e"
                }
            }
        },
        "InvokePolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                "arn:aws:lambda:*:*:function:qna-*",
                                "arn:aws:lambda:*:*:function:QNA-*",
                                {
                                    "Fn::GetAtt": [
                                        "ESQueryLambda",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ESLoggingLambda",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ESQidLambda",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "EmbeddingsLambdaArn",
                                        {
                                            "Ref": "EmbeddingsLambdaArn"
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExampleJSLambdaQuiz"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExampleJSLambdahook"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaBotBroker"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaConnectCallback"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaFeedback"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaNext"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaPrevious"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdahello"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCreateRecentTopicsResponse"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCustomJSHook"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCanvasLMSHook"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCustomPYHook"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "FulfillmentLambdaRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0696515f-9923-42d3-9a7e-bfdd749960c0"
                }
            }
        },
        "LexBotPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lex:PostText",
                                "lex:RecognizeText"
                            ],
                            "Resource": [
                                "arn:aws:lex:*:*:bot:QNA*",
                                "arn:aws:lex:*:*:bot*"
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "FulfillmentLambdaRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b36d0c4a-a04b-45d8-ab9a-37e2ba6a975a"
                }
            }
        },
        "FulfillmentLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Ref": "QueryPolicy"
                    }
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "translate:TranslateText",
                                        "translate:GetTerminology",
                                        "translate:ListTerminologies",
                                        "comprehend:DetectDominantLanguage",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "translateReadOnly"
                    },
                    {
                        "PolicyName": "AWSQnaBotComprehendReadOnly",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "comprehend:DetectDominantLanguage",
                                        "comprehend:DetectEntities",
                                        "comprehend:DetectKeyPhrases",
                                        "comprehend:DetectPiiEntities",
                                        "comprehend:ContainsPiiEntities",
                                        "comprehend:DetectSentiment",
                                        "comprehend:DetectSyntax",
                                        "comprehend:DescribeEntityRecognizer",
                                        "comprehend:ListEntityRecognizers"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "ParamStorePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter",
                                        "ssm:GetParameters"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    {
                                                        "Fn::Sub": "${AWS::Region}:"
                                                    },
                                                    {
                                                        "Fn::Sub": "${AWS::AccountId}:"
                                                    },
                                                    "parameter/",
                                                    {
                                                        "Ref": "DefaultQnABotSettings"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    {
                                                        "Fn::Sub": "${AWS::Region}:"
                                                    },
                                                    {
                                                        "Fn::Sub": "${AWS::AccountId}:"
                                                    },
                                                    "parameter/",
                                                    {
                                                        "Ref": "CustomQnABotSettings"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    {
                                                        "Fn::Sub": "${AWS::Region}:"
                                                    },
                                                    {
                                                        "Fn::Sub": "${AWS::AccountId}:"
                                                    },
                                                    "parameter/",
                                                    {
                                                        "Ref": "DefaultUserPoolJwksUrl"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DynamoDBPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:GetItem",
                                        "dynamodb:PutItem"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "UsersTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "Fn::If": [
                            "EmbeddingsSagemaker",
                            {
                                "PolicyName": "SagemakerInvokeEndpointAccess",
                                "PolicyDocument": {
                                    "Version": "2012-10-17",
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "sagemaker:InvokeEndpoint"
                                            ],
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "SagemakerEmbeddingsStack",
                                                    "Outputs.EmbeddingsSagemakerEndpointArn"
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "S3QNABucketReadAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::QNA*/*",
                                        "arn:aws:s3:::qna*/*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "f11444d7-0fa2-4569-b481-da94735d60d3"
                }
            }
        },
        "ESWarmerLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/fulfillment.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "FulfillmentCodeVersion"
                    }
                },
                "Environment": {
                    "Variables": {
                        "REPEAT_COUNT": "4",
                        "TARGET_PATH": "_search",
                        "TARGET_INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnaIndex"
                            ]
                        },
                        "TARGET_URL": {
                            "Fn::GetAtt": [
                                "ESVar",
                                "ESAddress"
                            ]
                        },
                        "DEFAULT_SETTINGS_PARAM": {
                            "Ref": "DefaultQnABotSettings"
                        },
                        "CUSTOM_SETTINGS_PARAM": {
                            "Ref": "CustomQnABotSettings"
                        }
                    }
                },
                "Handler": "index.warmer",
                "MemorySize": "512",
                "Role": {
                    "Fn::GetAtt": [
                        "WarmerLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Warmer"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "162ffa8d-a20c-452e-8c9a-15d5f4e6b1e0"
                }
            }
        },
        "WarmerLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "ParamStorePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter",
                                        "ssm:GetParameters"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    {
                                                        "Fn::Sub": "${AWS::Region}:"
                                                    },
                                                    {
                                                        "Fn::Sub": "${AWS::AccountId}:"
                                                    },
                                                    "parameter/",
                                                    {
                                                        "Ref": "DefaultQnABotSettings"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    {
                                                        "Fn::Sub": "${AWS::Region}:"
                                                    },
                                                    {
                                                        "Fn::Sub": "${AWS::AccountId}:"
                                                    },
                                                    "parameter/",
                                                    {
                                                        "Ref": "CustomQnABotSettings"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Sid": "AllowES",
                                    "Effect": "Allow",
                                    "Action": [
                                        "es:ESHttpGet"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "117fe27c-7bf1-4bb3-aa74-16697d448128"
                }
            }
        },
        "ESWarmerRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "ScheduleExpression": "rate(1 minute)",
                "Targets": [
                    {
                        "Id": "ESWarmerScheduler",
                        "Arn": {
                            "Fn::GetAtt": [
                                "ESWarmerLambda",
                                "Arn"
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "eb14f197-e688-430b-8f0a-fb3e1d96d2a5"
                }
            }
        },
        "ESWarmerRuleInvokeLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ESWarmerLambda",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ESWarmerRule",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "75f5f79c-63b2-49e8-9718-a1d41ce3eeba"
                }
            }
        },
        "LexBuildLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/lex-build.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "LexBuildCodeVersion"
                    }
                },
                "Environment": {
                    "Variables": {
                        "UTTERANCE_BUCKET": {
                            "Ref": "AssetBucket"
                        },
                        "UTTERANCE_KEY": "default-utterances.json",
                        "POLL_LAMBDA": {
                            "Fn::GetAtt": [
                                "LexBuildLambdaPoll",
                                "Arn"
                            ]
                        },
                        "STATUS_BUCKET": {
                            "Ref": "BuildStatusBucket"
                        },
                        "STATUS_KEY": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                "status.json",
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV2_STATUS_KEY": "lexV2status.json",
                        "BOTNAME": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "LexBot"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "BOTALIAS": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "VersionAlias"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "SLOTTYPE": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "SlotType"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "INTENT": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "Intent"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "INTENTFALLBACK": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "IntentFallback"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV2_BUILD_LAMBDA": {
                            "Ref": "Lexv2BotLambda"
                        },
                        "ADDRESS": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "ESVar",
                                            "ESAddress"
                                        ]
                                    }
                                ]
                            ]
                        },
                        "INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "index"
                            ]
                        }
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "LexBuildLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 900,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "5fce7ca8-adde-40d5-b9f4-b4c86d3af515"
                }
            }
        },
        "LexBuildLambdaStart": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\nvar s3=new aws.S3()\nvar crypto=require('crypto')\n\nexports.handler=async function(event,context,callback){\n    var token=crypto.randomBytes(16).toString('base64');\n    var bucket=process.env.STATUS_BUCKET;\n    var lexV1StatusFile=process.env.STATUS_KEY;\n    var lexV2StatusFile=process.env.LEXV2_STATUS_KEY;\n    var functionName=process.env.BUILD_FUNCTION;\n    var body=JSON.stringify({status:\"Starting\",token:token});\n\n    if (lexV1StatusFile) {\n        console.log(\"Initializing \", bucket, lexV1StatusFile);\n        await s3.putObject({\n            Bucket:bucket,\n            Key:lexV1StatusFile,\n            Body:body\n        }).promise();\n    }\n\n    console.log(\"Initializing \", bucket, lexV2StatusFile);\n    await s3.putObject({\n        Bucket:bucket,\n        Key:lexV2StatusFile,\n        Body:body\n    }).promise();\n\n    // The BUILD_FUNCTION takes care of rebuilding Lex V2 bot, and (unless QnABot is set to V2 only) Lex V1 bot\n    console.log(\"Invoking \", functionName);\n    await lambda.invoke({\n       FunctionName:functionName,\n       InvocationType:\"Event\",\n       Payload:\"{}\"\n    }).promise();\n    \n    callback(null,{token});\n};\n\n\n"
                },
                "Environment": {
                    "Variables": {
                        "STATUS_BUCKET": {
                            "Ref": "BuildStatusBucket"
                        },
                        "STATUS_KEY": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                "status.json",
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV2_STATUS_KEY": "lexV2status.json",
                        "BUILD_FUNCTION": {
                            "Fn::GetAtt": [
                                "LexBuildLambda",
                                "Arn"
                            ]
                        }
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "LexBuildLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 900,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "98bdb09d-3f69-4e07-88e6-6a1ca6af0992"
                }
            }
        },
        "LexBuildLambdaPoll": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\nvar lex=new aws.LexModelBuildingService\nvar s3=new aws.S3()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    return s3.getObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY\n    }).promise()\n    .then(x=>JSON.parse(x.Body.toString()))\n    .then(status=>{\n        return lex.getBot({\n            name:process.env.BOT_NAME,\n            versionOrAlias:\"$LATEST\"\n        }).promise()\n        .then(result=>{\n            status.status=result.status\n            if(result.status===\"BUILDING\"){\n                return new Promise(function(res,rej){\n                    setTimeout(()=>{\n                        lambda.invoke({\n                           FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,\n                           InvocationType:\"Event\",\n                           Payload:JSON.stringify(event)\n                        }).promise()\n                        .then(res).catch(rej)\n                    },2*1000    \n                    )\n                })\n            }else{\n                return s3.putObject({\n                    Bucket:process.env.STATUS_BUCKET,\n                    Key:process.env.STATUS_KEY,\n                    Body:JSON.stringify(status)\n                }).promise()\n            }\n        })\n    })\n    .then(()=>callback(null))\n    .catch(callback)\n}\n"
                },
                "Environment": {
                    "Variables": {
                        "STATUS_KEY": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                "status.json",
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "STATUS_BUCKET": {
                            "Ref": "BuildStatusBucket"
                        },
                        "BOT_NAME": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "LexBot"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        }
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "LexBuildLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 900,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "b6f74567-9e74-4321-82ab-9553061967ce"
                }
            }
        },
        "LexBuildCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/lex-build.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.578Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8cf721d8-9643-4b7c-84de-e04fde95ba02"
                }
            }
        },
        "LexBuildInvokePolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "LexBuildLambda",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "LexBuildLambdaPoll",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "Lexv2BotLambda",
                                        "Arn"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "LexBuildLambdaRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "76403546-9c54-4cd6-8aed-cd62abf6a05e"
                }
            }
        },
        "LexBuildLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "AWSQnaBotLexFullAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "polly:SynthesizeSpeech",
                                        "logs:DescribeLogGroups",
                                        "cloudwatch:DescribeAlarms",
                                        "kms:DescribeKey",
                                        "s3:GetBucketLocation",
                                        "lambda:GetPolicy"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:polly:${AWS::Region}:${AWS::AccountId}:lexicon/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListAllMyBuckets",
                                        "lambda:ListFunctions",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "kms:ListAliases",
                                        "iam:ListRoles",
                                        "cloudwatch:GetMetricStatistics",
                                        "kendra:ListIndices",
                                        "polly:DescribeVoices"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:AddPermission",
                                        "lambda:RemovePermission"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AmazonLex*"
                                    },
                                    "Condition": {
                                        "StringEquals": {
                                            "lambda:Principal": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeleteServiceLinkedRole",
                                        "iam:GetServiceLinkedRoleDeletionStatus"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lex.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "channels.lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "AssetBucketAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${AssetBucket}*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Put*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Ref": "QueryPolicy"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        },
                        {
                            "id": "W76",
                            "reason": "This role is required to have high SPCM"
                        },
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "f7ec26c4-8edc-49ce-8b45-3908122bed95"
                }
            }
        },
        "BuildStatusBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "NoncurrentVersionExpirationInDays": 1,
                            "Status": "Enabled"
                        },
                        {
                            "AbortIncompleteMultipartUpload": {
                                "DaysAfterInitiation": 1
                            },
                            "Status": "Enabled"
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                },
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "9a50e1a4-cbce-4ad7-aa50-dbb0fdcf7463"
                }
            }
        },
        "HTTPSOnlyBuildStatusBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "BuildStatusBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "BuildStatusBucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "serverless-bot-framework/CloudfrontStaticWebsite/CloudFrontToS3/S3LoggingBucket/Policy/Resource",
                "AWS::CloudFormation::Designer": {
                    "id": "a073cdc1-d606-42e8-add3-f083e5aefc86"
                }
            }
        },
        "BuildStatusClear": {
            "Type": "Custom::S3Clear",
            "DependsOn": [
                "CFNInvokePolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Ref": "BuildStatusBucket"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7fa6a505-988c-4056-8cbd-37ae1240e4ab"
                }
            }
        },
        "Lexv2BotLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/lexv2-build.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "Lexv2BotCodeVersion"
                    }
                },
                "Environment": {
                    "Variables": {
                        "STACKNAME": {
                            "Ref": "AWS::StackName"
                        },
                        "FULFILLMENT_LAMBDA_ARN": {
                            "Fn::Join": [
                                ":",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "FulfillmentLambda",
                                            "Arn"
                                        ]
                                    },
                                    "live"
                                ]
                            ]
                        },
                        "LOCALES": {
                            "Ref": "LexV2BotLocaleIds"
                        },
                        "PYTHONPATH": "/var/task/py_modules:/var/runtime:/opt/python"
                    }
                },
                "Handler": "handler.handler",
                "MemorySize": "1024",
                "Role": {
                    "Fn::GetAtt": [
                        "Lexv2BotLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "Timeout": 900,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "bee52267-1cef-4ed5-89cf-6a64774aaf4e"
                }
            }
        },
        "Lexv2BotCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/lexv2-build.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.578Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "660e6812-b64a-4547-af5b-104d33182ebe"
                }
            }
        },
        "Lexv2BotLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "AWSQnaBotLexFullAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "polly:SynthesizeSpeech",
                                        "logs:DescribeLogGroups",
                                        "cloudwatch:DescribeAlarms",
                                        "kms:DescribeKey",
                                        "s3:GetBucketLocation",
                                        "lambda:GetPolicy"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:polly:${AWS::Region}:${AWS::AccountId}:lexicon/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListAllMyBuckets",
                                        "lambda:ListFunctions",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "kms:ListAliases",
                                        "iam:ListRoles",
                                        "cloudwatch:GetMetricStatistics",
                                        "kendra:ListIndices",
                                        "polly:DescribeVoices"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:AddPermission",
                                        "lambda:RemovePermission"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AmazonLex*"
                                    },
                                    "Condition": {
                                        "StringEquals": {
                                            "lambda:Principal": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeleteServiceLinkedRole",
                                        "iam:GetServiceLinkedRoleDeletionStatus"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lex.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "channels.lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "LexV2ServiceLinkedRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole",
                                        "iam:DeleteRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringLike": {
                                            "iam:AWSServiceName": "lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "translate:TranslateText",
                                        "comprehend:DetectDominantLanguage"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "BuildStatusBucketAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:Put*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Ref": "QueryPolicy"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        },
                        {
                            "id": "W76",
                            "reason": "This role is required to have high SPCM"
                        },
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "d2918228-6ed5-4823-9587-f51d7ec3fa4d"
                }
            }
        },
        "LexAccessPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lex:PostContent",
                                "lex:PostText",
                                "lex:RecognizeText",
                                "lex:RecognizeUtterance"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "polly:SynthesizeSpeech"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "Roles": {
                    "Fn::If": [
                        "Public",
                        [
                            {
                                "Ref": "AdminRole"
                            },
                            {
                                "Ref": "UnauthenticatedRole"
                            },
                            {
                                "Ref": "UserRole"
                            }
                        ],
                        [
                            {
                                "Ref": "AdminRole"
                            },
                            {
                                "Ref": "UserRole"
                            }
                        ]
                    ]
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W13",
                            "reason": "This policy is required to have * resource"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "0f398051-f63a-46ee-a461-bc4a1b076297"
                }
            }
        },
        "ApiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ApiGatewayLogsPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents",
                                        "logs:GetLogEvents",
                                        "logs:FilterLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "a1787bf7-dd1f-44ee-9158-05059054efe4"
                }
            }
        },
        "ApiGatewayRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "06c3f59b-b123-4bec-b347-98980f06215e"
                }
            }
        },
        "ESProxyCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.579Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b9231642-e7ae-4994-92ae-aa3a521003a8"
                }
            }
        },
        "UtteranceLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Environment": {
                    "Variables": {
                        "ES_INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnaIndex"
                            ]
                        },
                        "ES_ADDRESS": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "ESVar",
                                            "ESAddress"
                                        ]
                                    }
                                ]
                            ]
                        },
                        "UTTERANCE_BUCKET": {
                            "Ref": "AssetBucket"
                        },
                        "UTTERANCE_KEY": "default-utterances.json"
                    }
                },
                "Handler": "index.utterances",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Service"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "59a7dfde-f6b9-4218-be09-dc15e0622fdb"
                }
            }
        },
        "ESQidLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Environment": {
                    "Variables": {
                        "ES_INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnaIndex"
                            ]
                        },
                        "ES_ADDRESS": {
                            "Fn::GetAtt": [
                                "ESVar",
                                "ESAddress"
                            ]
                        }
                    }
                },
                "Handler": "index.qid",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Service"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "70da94a5-8a87-498a-a92f-840379ca616c"
                }
            }
        },
        "ESCleaningLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Environment": {
                    "Variables": {
                        "ES_INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnaIndex"
                            ]
                        },
                        "ES_ADDRESS": {
                            "Fn::GetAtt": [
                                "ESVar",
                                "ESAddress"
                            ]
                        },
                        "FEEDBACK_DELETE_RANGE_MINUTES": {
                            "Ref": "KibanaDashboardRetentionMinutes"
                        },
                        "METRICS_DELETE_RANGE_MINUTES": {
                            "Ref": "KibanaDashboardRetentionMinutes"
                        }
                    }
                },
                "Handler": "index.cleanmetrics",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Service"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "e40c2435-8af7-4566-a35a-27b729b9ee39"
                }
            }
        },
        "ScheduledESCleaning": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "",
                "ScheduleExpression": "rate(1 day)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "ESCleaningLambda",
                                "Arn"
                            ]
                        },
                        "Id": "ES_Cleaning_Function"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "462af1b2-4a97-4be1-b776-ab96101644db"
                }
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "ESCleaningLambda"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ScheduledESCleaning",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5afa7c9f-fcb3-46ee-b21d-ecba2ede4547"
                }
            }
        },
        "ESLoggingLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Environment": {
                    "Variables": {
                        "FIREHOSE_NAME": {
                            "Ref": "GeneralFirehose"
                        }
                    }
                },
                "Handler": "index.logging",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESLoggingLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Logging"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "199c1cc4-105d-4203-9c51-32370d1a519a"
                }
            }
        },
        "ESQueryLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Environment": {
                    "Variables": {
                        "DEFAULT_SETTINGS_PARAM": {
                            "Ref": "DefaultQnABotSettings"
                        },
                        "CUSTOM_SETTINGS_PARAM": {
                            "Ref": "CustomQnABotSettings"
                        },
                        "ExampleJSLambdaQuiz": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExampleJSLambdaQuiz"
                            ]
                        },
                        "ExampleJSLambdahook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExampleJSLambdahook"
                            ]
                        },
                        "ExamplePYTHONLambdaBotBroker": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaBotBroker"
                            ]
                        },
                        "ExamplePYTHONLambdaConnectCallback": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaConnectCallback"
                            ]
                        },
                        "ExamplePYTHONLambdaFeedback": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaFeedback"
                            ]
                        },
                        "ExamplePYTHONLambdaNext": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaNext"
                            ]
                        },
                        "ExamplePYTHONLambdaPrevious": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdaPrevious"
                            ]
                        },
                        "ExamplePYTHONLambdahello": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.ExamplePYTHONLambdahello"
                            ]
                        },
                        "EXTCreateRecentTopicsResponse": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCreateRecentTopicsResponse"
                            ]
                        },
                        "EXTCustomJSHook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCustomJSHook"
                            ]
                        },
                        "EXTCanvasLMSHook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCanvasLMSHook"
                            ]
                        },
                        "EXTCustomPYHook": {
                            "Fn::GetAtt": [
                                "ExamplesStack",
                                "Outputs.EXTCustomPYHook"
                            ]
                        }
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Handler": "index.query",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Query"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "8cfa9ace-fb35-4740-927e-c0667aec69cb"
                }
            }
        },
        "ESProxyLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/proxy-es.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ESProxyCodeVersion"
                    }
                },
                "Layers": [
                    {
                        "Ref": "AwsSdkLayerLambdaLayer"
                    },
                    {
                        "Ref": "CommonModulesLambdaLayer"
                    },
                    {
                        "Ref": "EsProxyLambdaLayer"
                    },
                    {
                        "Ref": "QnABotCommonLambdaLayer"
                    }
                ],
                "Environment": {
                    "Variables": {
                        "ES_TYPE": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnAType"
                            ]
                        },
                        "ES_INDEX": {
                            "Fn::GetAtt": [
                                "Var",
                                "QnaIndex"
                            ]
                        },
                        "ES_ADDRESS": {
                            "Fn::GetAtt": [
                                "ESVar",
                                "ESAddress"
                            ]
                        },
                        "DEFAULT_SETTINGS_PARAM": {
                            "Ref": "DefaultQnABotSettings"
                        },
                        "CUSTOM_SETTINGS_PARAM": {
                            "Ref": "CustomQnABotSettings"
                        },
                        "EMBEDDINGS_API": {
                            "Ref": "EmbeddingsApi"
                        },
                        "EMBEDDINGS_SAGEMAKER_ENDPOINT": {
                            "Fn::If": [
                                "EmbeddingsSagemaker",
                                {
                                    "Fn::GetAtt": [
                                        "SagemakerEmbeddingsStack",
                                        "Outputs.EmbeddingsSagemakerEndpoint"
                                    ]
                                },
                                ""
                            ]
                        },
                        "EMBEDDINGS_LAMBDA_ARN": {
                            "Ref": "EmbeddingsLambdaArn"
                        }
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "1408",
                "Role": {
                    "Fn::GetAtt": [
                        "ESProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Service"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "79b619fc-e9bd-4881-b219-6c5b4a31d464"
                }
            }
        },
        "ESProxyLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Ref": "QueryPolicy"
                    }
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "translate:TranslateText",
                                        "translate:GetTerminology",
                                        "translate:ListTerminologies",
                                        "comprehend:DetectDominantLanguage",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "translateReadOnly"
                    },
                    {
                        "PolicyName": "AWSQnaBotLexFullAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "polly:SynthesizeSpeech",
                                        "logs:DescribeLogGroups",
                                        "cloudwatch:DescribeAlarms",
                                        "kms:DescribeKey",
                                        "s3:GetBucketLocation",
                                        "lambda:GetPolicy"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:polly:${AWS::Region}:${AWS::AccountId}:lexicon/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListAllMyBuckets",
                                        "lambda:ListFunctions",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "kms:ListAliases",
                                        "iam:ListRoles",
                                        "cloudwatch:GetMetricStatistics",
                                        "kendra:ListIndices",
                                        "polly:DescribeVoices"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:AddPermission",
                                        "lambda:RemovePermission"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AmazonLex*"
                                    },
                                    "Condition": {
                                        "StringEquals": {
                                            "lambda:Principal": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeleteServiceLinkedRole",
                                        "iam:GetServiceLinkedRoleDeletionStatus"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lex.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "channels.lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "ParamStorePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter",
                                        "ssm:GetParameters"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "Fn::If": [
                            "EmbeddingsEnable",
                            {
                                "PolicyName": "EmbeddingsPolicy",
                                "PolicyDocument": {
                                    "Version": "2012-10-17",
                                    "Statement": [
                                        {
                                            "Fn::If": [
                                                "EmbeddingsSagemaker",
                                                {
                                                    "Effect": "Allow",
                                                    "Action": [
                                                        "sagemaker:InvokeEndpoint"
                                                    ],
                                                    "Resource": {
                                                        "Fn::GetAtt": [
                                                            "SagemakerEmbeddingsStack",
                                                            "Outputs.EmbeddingsSagemakerEndpointArn"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "EmbeddingsLambdaArn",
                                                {
                                                    "Effect": "Allow",
                                                    "Action": [
                                                        "lambda:InvokeFunction"
                                                    ],
                                                    "Resource": [
                                                        {
                                                            "Ref": "EmbeddingsLambdaArn"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "S3QNABucketReadAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::QNA*/*",
                                        "arn:aws:s3:::qna*/*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        },
                        {
                            "id": "W76",
                            "reason": "This role is required to have high SPCM"
                        },
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "c291cfb7-a0ff-4c9c-a389-15a48200be18"
                }
            }
        },
        "QueryLambdaInvokePolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                "arn:aws:lambda:*:*:function:qna*",
                                "arn:aws:lambda:*:*:function:QNA*",
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExampleJSLambdaQuiz"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExampleJSLambdahook"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaBotBroker"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaConnectCallback"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaFeedback"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaNext"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdaPrevious"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.ExamplePYTHONLambdahello"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCreateRecentTopicsResponse"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCustomJSHook"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCanvasLMSHook"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ExamplesStack",
                                        "Outputs.EXTCustomPYHook"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "ESProxyLambdaRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "52fba9c7-ac3c-4ca0-a6df-7637dd3dbe58"
                }
            }
        },
        "ESLoggingLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "LambdaGeneralFirehoseQNALambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:lambda:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":function:qna-*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:lambda:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":function:QNA-*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "comprehend:DetectPiiEntities"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "firehose:PutRecord",
                                        "firehose:PutRecordBatch"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "GeneralFirehose",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "6c38762d-da8c-4dc8-bfc3-ba17f065cd35"
                }
            }
        },
        "QueryPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "es:*"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kendra:Query"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:kendra:${AWS::Region}:${AWS::AccountId}:index/*"
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:s3:::${AssetBucket}*"
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "comprehend:DetectSyntax"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "F5",
                            "reason": "This role policy is required to have * action in its policy"
                        },
                        {
                            "id": "W13",
                            "reason": "This IAM policy requires to have * resource"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b"
                }
            }
        },
        "LexProxyLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lex=new aws.LexModelBuildingService()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    lex[event.fnc](event.params).promise()\n    .then(function(x){\n        console.log(\"Response: \"+JSON.stringify(x,null,2))\n        callback(null,x)\n    })\n    .catch(function(y){\n        console.log(\"Error: \"+y)\n        callback(JSON.stringify({\n            type:\"[InternalServiceError]\",\n            data:y\n        }))\n    })\n};\n\n"
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "LexProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "780398c6-0a46-4313-aacb-5cf8e30222f9"
                }
            }
        },
        "LexStatusLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\nconst lexv2 = new aws.LexModelsV2();\n\nexports.handler = async (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    let bucket=process.env.STATUS_BUCKET;\n    let lexV1StatusFile=process.env.STATUS_KEY;\n    let lexV2StatusFile=process.env.LEXV2_STATUS_KEY;\n    let build = {\"status\":\"READY\",\"token\":\"token\"};\n    let response;\n\n    try {\n        response = await s3.getObject({Bucket:bucket, Key:lexV2StatusFile}).promise();\n        build = JSON.parse(response.Body.toString());\n        // combine build status with v1 bot, if defined.. If both are READY then status is READY\n        if (lexV1StatusFile) {\n            response = await s3.getObject({Bucket:bucket, Key:lexV1StatusFile}).promise();\n            let v1build = JSON.parse(response.Body.toString());\n            if (v1build.status != \"READY\" || build.status != \"READY\" ) {\n                build.status = \"LEX V2: \" + build.status + \" / LEX V1: \" + v1build.status\n            }\n        }\n    } catch(e) {\n        console.log(\"Unable to read S3 lex bot status file - perhaps it doesn't yet exist. Returning READY\");\n    }\n\n    response = await lexv2.describeBot({\n            botId:process.env.LEXV2_BOT_ID,\n        }).promise() ;\n    // Match LexV1 bot status for code compatibility (Available = READY)\n    let botStatus = (response.botStatus == \"Available\") ? \"READY\" :  response.botStatus ;\n    \n    return {\n        \"lambdaArn\": process.env.FULFILLMENT_FUNCTION_ARN,\n        \"lambdaRole\":process.env.FULFILLMENT_FUNCTION_ROLE,\n        \"botversion\":\"live\",\n        \"botname\":process.env.LEXV1_BOT_NAME || \"LEX V1 Bot not installed\",\n        \"intent\":process.env.LEXV1_INTENT || \"LEX V1 Bot not installed\",\n        \"intentFallback\":process.env.LEXV1_INTENT_FALLBACK || \"LEX V1 Bot not installed\",\n        \"lexV2botname\":process.env.LEXV2_BOT_NAME || \"LEX V2 Bot not installed\",\n        \"lexV2botid\":process.env.LEXV2_BOT_ID || \"LEX V2 Bot not installed\",\n        \"lexV2botalias\":process.env.LEXV2_BOT_ALIAS || \"LEX V2 Bot not installed\",\n        \"lexV2botaliasid\":process.env.LEXV2_BOT_ALIAS_ID || \"LEX V2 Bot not installed\",\n        \"lexV2intent\":process.env.LEXV2_INTENT || \"LEX V2 Bot not installed\",\n        \"lexV2intentFallback\":process.env.LEXV2_INTENT_FALLBACK || \"LEX V2 Bot not installed\",\n        \"lexV2localeids\":process.env.LEXV2_BOT_LOCALE_IDS || \"LEX V2 Bot not installed\",\n        \"status\":botStatus,\n        \"build\":build,\n    } ;\n};\n\n\n"
                },
                "Environment": {
                    "Variables": {
                        "STATUS_BUCKET": {
                            "Ref": "BuildStatusBucket"
                        },
                        "STATUS_KEY": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                "status.json",
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV2_STATUS_KEY": "lexV2status.json",
                        "FULFILLMENT_FUNCTION_ARN": {
                            "Fn::Join": [
                                ":",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "FulfillmentLambda",
                                            "Arn"
                                        ]
                                    },
                                    "live"
                                ]
                            ]
                        },
                        "FULFILLMENT_FUNCTION_ROLE": {
                            "Ref": "FulfillmentLambdaRole"
                        },
                        "LEXV1_BOT_NAME": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "LexBot"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV1_INTENT": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "Intent"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV1_INTENT_FALLBACK": {
                            "Fn::If": [
                                "CreateLexV1Bots",
                                {
                                    "Ref": "IntentFallback"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "LEXV2_BOT_NAME": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botName"
                            ]
                        },
                        "LEXV2_BOT_ID": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botId"
                            ]
                        },
                        "LEXV2_BOT_ALIAS": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botAlias"
                            ]
                        },
                        "LEXV2_BOT_ALIAS_ID": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botAliasId"
                            ]
                        },
                        "LEXV2_INTENT": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botIntent"
                            ]
                        },
                        "LEXV2_INTENT_FALLBACK": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botIntentFallback"
                            ]
                        },
                        "LEXV2_BOT_LOCALE_IDS": {
                            "Fn::GetAtt": [
                                "LexV2Bot",
                                "botLocaleIds"
                            ]
                        }
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "LexProxyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "b9db5891-cba2-4244-8c2c-31d09f5da994"
                }
            }
        },
        "LexProxyLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyName": "AWSQnaBotLexFullAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "polly:SynthesizeSpeech",
                                        "logs:DescribeLogGroups",
                                        "cloudwatch:DescribeAlarms",
                                        "kms:DescribeKey",
                                        "s3:GetBucketLocation",
                                        "lambda:GetPolicy"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:polly:${AWS::Region}:${AWS::AccountId}:lexicon/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListAllMyBuckets",
                                        "lambda:ListFunctions",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "kms:ListAliases",
                                        "iam:ListRoles",
                                        "cloudwatch:GetMetricStatistics",
                                        "kendra:ListIndices",
                                        "polly:DescribeVoices"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:GetBuiltinIntent",
                                        "lex:GetIntents",
                                        "lex:GetBots",
                                        "lex:GetSlotTypes",
                                        "lex:GetBotAliases",
                                        "lex:StartImport",
                                        "lex:GetMigration",
                                        "lex:GetBuiltinSlotTypes",
                                        "lex:GetBuiltinIntents",
                                        "lex:GetImport",
                                        "lex:GetMigrations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:intent:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:slottype:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-channel:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:CreateUploadUrl",
                                        "lex:ListBuiltInSlotTypes",
                                        "lex:ListBots",
                                        "lex:ListBuiltInIntents",
                                        "lex:ListImports",
                                        "lex:ListExports"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "lex:*",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/*/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lex:${AWS::Region}:${AWS::AccountId}:bot/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:AddPermission",
                                        "lambda:RemovePermission"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AmazonLex*"
                                    },
                                    "Condition": {
                                        "StringEquals": {
                                            "lambda:Principal": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lex.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": "channels.lexv2.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeleteServiceLinkedRole",
                                        "iam:GetServiceLinkedRoleDeletionStatus"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lex.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": [
                                                "channels.lexv2.amazonaws.com"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "Access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        },
                        {
                            "id": "W76",
                            "reason": "This role is required to have high SPCM"
                        },
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "20088d09-155d-434e-ac36-e84c463a5721"
                }
            }
        },
        "AdminRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity",
                            "Condition": {
                                "StringEquals": {
                                    "cognito-identity.amazonaws.com:aud": {
                                        "Ref": "IdPool"
                                    }
                                }
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "apiAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "es:ESHttp*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "ESVar",
                                                "ESArn"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "execute-api:*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ImportBucket}/data/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${TestAllBucket}/data/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ExportBucket}/data/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${TestAllBucket}/data/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameters",
                                        "ssm:PutParameter"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DefaultQnABotSettings}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CustomQnABotSettings}"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "09efa5ec-6886-4a5f-ab7f-3261aee89f29"
                }
            }
        },
        "UserRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity",
                            "Condition": {
                                "StringEquals": {
                                    "cognito-identity.amazonaws.com:aud": {
                                        "Ref": "IdPool"
                                    }
                                }
                            }
                        }
                    ]
                },
                "Path": "/"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "938b7f8b-5eff-4d0f-8a16-c848be62e8cd"
                }
            }
        },
        "UnauthenticatedRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity",
                            "Condition": {
                                "StringEquals": {
                                    "cognito-identity.amazonaws.com:aud": {
                                        "Ref": "IdPool"
                                    }
                                }
                            }
                        }
                    ]
                },
                "Path": "/"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "85644894-3f1c-4163-bc74-d13cd46b08d6"
                }
            }
        },
        "CFNLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
                    "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyName": "access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "es:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:PutSlotType",
                                        "lex:GetSlotType",
                                        "lex:DeleteSlotType",
                                        "lex:PutIntent",
                                        "lex:GetIntent",
                                        "lex:DeleteIntent",
                                        "lex:PutBot",
                                        "lex:GetBot",
                                        "lex:DeleteBot",
                                        "lex:PutBotAlias",
                                        "lex:DeleteBotAlias",
                                        "lex:GetBotAlias",
                                        "lex:GetBotVersions",
                                        "lex:GetIntentVersions",
                                        "lex:GetSlotTypeVersions"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "apigateway:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-identity:SetIdentityPoolRoles",
                                        "cognito-identity:GetIdentityPoolRoles",
                                        "iam:PassRole",
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-idp:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "CFNLambdaS3Access",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucketVersions",
                                        "s3:PutBucketNotification",
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:DeleteObjectVersion",
                                        "s3:DeleteObject",
                                        "s3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:PublishVersion"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        },
                        {
                            "id": "F38",
                            "reason": "This role policy is required to have * action in its policy with PassRole action"
                        },
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "d2cebb90-1aff-4421-92b8-9d6809d553ab"
                }
            }
        },
        "Bot": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "bot",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "73d8d999-fff3-40d4-84f1-ef30f11fef84"
                }
            }
        },
        "AlexaApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Bot"
                },
                "PathPart": "alexa",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ee1b87a2-d3ac-4bb0-8fd9-4e29f1338bbe"
                }
            }
        },
        "AlexaSchema": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UtteranceLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($utterances = $inputRoot.utterances)\n\n{\n  \"interactionModel\": {\n    \"languageModel\": {\n      \"invocationName\": \"q and a\",\n      \"types\": [\n        {\n          \"name\": \"EXAMPLE_QUESTIONS\",\n          \"values\": [\n            #foreach( $utterance in $utterances)\n                {\"name\":{\n                    \"value\":\"$utterance\" \n                }}#if( $foreach.hasNext ),#end\n            #end\n          ]\n        }\n        ## {\n        ##     \"name\": \"EXAMPLE_QUESTIONS\",\n        ##     \"values\": [\n        ##         {\n        ##             \"name\": {\n        ##                 \"value\": \"this is required\"\n        ##             }\n        ##         }\n        ##     ]\n        ##   }\n      ],\n      \"intents\": [\n        {\n          \"slots\": [\n            {\n              \"name\": \"QnA_slot\",\n              \"type\": \"EXAMPLE_QUESTIONS\"\n            }\n          ],\n          \"name\": \"Qna_intent\",\n          \"samples\": [\n            \"{QnA_slot}\"\n          ]\n        },\n        {\n          \"name\": \"AMAZON.StopIntent\"\n        },\n        {\n          \"name\": \"AMAZON.RepeatIntent\"\n        },\n        {\n          \"name\": \"AMAZON.FallbackIntent\"\n        },\n        {\n          \"name\": \"AMAZON.CancelIntent\"\n        }\n      ]\n    }\n  }\n}\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n}                \n               \n\n"
                        }
                    }
                },
                "ResourceId": {
                    "Ref": "AlexaApi"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "94df9477-99c3-4723-af65-370e31882b10"
                }
            }
        },
        "BotPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "LexBuildLambdaStart",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "{\"token\":\"$input.path('$.token')\"}\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "Bot"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f39e8963-97c5-4a84-86f2-e4ff28f1674f"
                }
            }
        },
        "BotGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "LexStatusLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n#set($inputRoot = $input.path('$'))\n\n{\n    \"lambdaArn\": \"$inputRoot.lambdaArn\",\n    \"lambdaRole\":\"$inputRoot.lambdaRole\",\n    \"botversion\":\"$inputRoot.botversion\",\n    \"botname\":\"$inputRoot.botname\",\n    \"intent\":\"$inputRoot.intent\",\n    \"intentFallback\":\"$inputRoot.intentFallback\",\n    \"lexV2botname\":\"$inputRoot.lexV2botname\",\n    \"lexV2botid\":\"$inputRoot.lexV2botid\",\n    \"lexV2botalias\":\"$inputRoot.lexV2botalias\",\n    \"lexV2botaliasid\":\"$inputRoot.lexV2botaliasid\",\n    \"lexV2intent\":\"$inputRoot.lexV2intent\",\n    \"lexV2intentFallback\":\"$inputRoot.lexV2intentFallback\",\n    \"lexV2localeids\":\"$inputRoot.lexV2localeids\",\n    \"status\":\"$inputRoot.status\",\n    \"build\":$input.json('$.build'),\n    \"_links\":{\n        \"alexa\":{\n            \"href\":\"$root/bot/alexa\"\n        }\n    }\n}\n\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n    \"fnc\":\"getBot\"\n}                \n               \n\n"
                        }
                    }
                },
                "ResourceId": {
                    "Ref": "Bot"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8f24d135-a67d-4359-92a2-86b570062ae8"
                }
            }
        },
        "BotDoc": {
            "Type": "AWS::ApiGateway::DocumentationPart",
            "Properties": {
                "Location": {
                    "Type": "RESOURCE",
                    "Path": "/bot"
                },
                "Properties": "{\"description\":\"\"}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ab7eba18-ec85-43c2-b927-c1f26ccab666"
                }
            }
        },
        "Health": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "health",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cf7c1554-4834-478c-a648-a9cf2aba88b8"
                }
            }
        },
        "HealthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "{\"status\":\"health\"}\n\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"GET\",\n    \"path\":\"/_cluster/health\"\n}\n\n"
                        }
                    }
                },
                "ResourceId": {
                    "Ref": "Health"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "651cde8c-cd38-486b-a10e-2f2bf9ffa2e8"
                }
            }
        },
        "rootGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"region\":\"${!stageVariables.Region}\",\n    \"Version\":\"${InfoVar.Version}\",\n    \"BuildDate\":\"${InfoVar.BuildDateString}\",\n    \"BotName\":\"Use LexV2 bot\",\n    \"BotVersion\":\"$LATEST\",\n    \"v2BotId\": \"${LexV2Bot.botId}\",\n    \"v2BotAliasId\": \"${LexV2Bot.botAliasId}\",\n    \"v2BotLocaleId\": \"${LexV2BotLocaleIds}\",\n    \"PoolId\":\"${IdPool}\",\n    \"StackName\":\"${AWS::StackName}\",\n    \"ClientIdClient\":\"${ClientClient}\",\n    \"ClientIdDesigner\":\"${ClientDesigner}\",\n    \"UserPool\":\"${UserPool}\",\n    \"DefaultQnABotSettings\":\"${DefaultQnABotSettings}\",\n    \"CustomQnABotSettings\":\"${CustomQnABotSettings}\",\n    \"KendraCrawlerSnsTopic\":\"${KendraCrawlerSnsTopic}\",\n    \"Id\":\"$stageVariables.Id\",\n    \"_links\":{\n        \"root\":{\n            \"href\":\"$root\"\n        },\n        \"questions\":{\n            \"href\":\"$root/questions\"\n        },        \n        \"crawler\":{\n            \"href\":\"$root/crawler\"\n        },\n        \"crawlerV2\":{\n            \"href\":\"$root/kendranativecrawler\"\n        },\n        \"bot\":{\n            \"href\":\"$root/bot\"\n        },\n        \"jobs\":{\n            \"href\":\"$root/jobs\"\n        },\n        \"connect\":{\n            \"href\":\"$root/connect\"\n        },\n        \"genesys\":{\n            \"href\":\"$root/genesys\"\n        },\n        \"translate\":{\n            \"href\":\"$root/translate\"\n        },\n        \"examples\":{\n            \"href\":\"$root/examples/documents\"\n        },\n        \"DesignerLogin\":{\n            \"href\":\"$stageVariables.DesignerLoginUrl\"\n        },\n        \"ClientLogin\":{\n            \"href\":\"$stageVariables.ClientLoginUrl\"\n        },\n        \"CognitoEndpoint\":{\n            \"href\":\"$stageVariables.CognitoEndpoint\"\n        },\n        \"Services\":{\n            \"href\":\"$root/services\"\n        },\n        \"Kibana\":{\n            \"href\":\"https://${Urls.Kibana}\"\n        }\n    }\n}\n\n"
                                }
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    }
                },
                "ResourceId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "5e996c6f-02d1-4836-b2a9-27091b1046cd"
                }
            }
        },
        "Questions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "questions",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "41d996de-38e6-458a-9c76-f40c4988b8be"
                }
            }
        },
        "QuestionsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"total\":$inputRoot.hits.total.value,\n    \"version\":\"1\",\n    \"qa\":[\n        #foreach( $hit in $inputRoot.hits.hits)\n            {\n                #set($Scorepath =  '$.hits.hits['+$foreach.index+']._score')\n                \"_score\":$input.json($Scorepath),\n                #set($Bodypath =  '$.hits.hits['+$foreach.index+']._source')\n                #foreach($paramName in $input.path($Bodypath).keySet())\n                    #if( $paramName == 'questions')\n                        \"q\":[\n                            #foreach( $question in $input.path($Bodypath).get($paramName))\n                                \"$question.q\"\n                                #if($foreach.hasNext),#end\n                            #end\n                        ]\n                    #else\n                        #set( $body =  $Bodypath+\".\"+$paramName)\n                        \"$paramName\" :$input.json($body) \n                    #end\n                #if($foreach.hasNext),#end\n                #end\n            }#if( $foreach.hasNext ),#end\n        #end\n    ]\n}\n\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#if ( $input.params('perpage').length()==0 )\n    #set ( $perpage = 10 )\n#else\n    #set ( $perpage = $input.params('perpage') )\n#end\n\n#if ( $input.params('from').length()==0)\n    #set ( $from = 0 )\n#else\n    #set ( $from = $input.params('from') )\n#end\n\n#if ( $input.params('order').length()==0 )\n    #set ( $order = \"asc\" )\n#else\n    #set ( $order = $input.params('order') )\n#end\n    \n{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n\n    \n    #if($input.params('query').length()>0)\n    \"path\":\"/${Var.QnaIndex}/_search?search_type=dfs_query_then_fetch\",\n    \"question\": \"$util.urlDecode($input.params('query'))\",\n    #else\n    \"path\":\"/${Var.QnaIndex}/_search?search_type=dfs_query_then_fetch\",\n    \"question\": \"\",\n    #end\n    \n    #if ($input.params('topic'))\n    \"topic\": \"$util.urlDecode($input.params('topic'))\",\n    #else\n    \"topic\": \"\",\n    #end\n\n    #if ($input.params('client_filter'))\n    \"client_filter\": \"$util.urlDecode($input.params('client_filter'))\",\n    #else\n    \"client_filter\": \"\",\n    #end\n\n    #if ($input.params('score_answer'))\n    \"score_answer\": \"$util.urlDecode($input.params('score_answer'))\",\n    #else\n    \"score_answer\": \"\",\n    #end\n\n    \"size\":\"$perpage\",\n    \"from\":\"$from\",\n\n\n    \"body\":{\n        #if($input.params('query').length()>0)\n        \"comment\": \"ES Query for test queries are now built dynamically by ESProxy Lambda handler.\"\n        #else\n        \"size\":\"$perpage\",\n        \"from\":\"$from\",\n        \"_source\": {\n            \"exclude\": [\"questions.q_vector\", \"a_vector\"]\n        },\n        \"query\": {\n            \"bool\":{\n                #if($input.params('filter').length()==0)\n                \"must\":{\"match_all\":{}}\n                #else\n                \"filter\":{\"regexp\":{\n                    \"qid\":\"$util.urlDecode($input.params('filter'))\"\n                }}\n                #end\n            }\n        }\n        ,\"sort\":{\n            \"qid\":{\n                \"order\":\"$order\" \n            }\n        }\n        #end\n    }\n}\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.query": false,
                    "method.request.querystring.topic": false,
                    "method.request.querystring.from": false,
                    "method.request.querystring.filter": false,
                    "method.request.querystring.order": false,
                    "method.request.querystring.perpage": false
                },
                "ResourceId": {
                    "Ref": "Questions"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "608faa2c-f58c-4e30-b395-f48e83e8a918"
                }
            }
        },
        "QuestionsDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "DELETE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 204,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "{\n    \"message\":\"success\",\n    \"count\":\"$input.path('$.deleted')\"\n}\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    \"path\":\"/${Var.QnaIndex}/_delete_by_query?refresh=true\",\n    \"body\":{\n        \"query\":{\n            #if($input.path('$.query').length()!=0)\n            \"bool\":{\n                \"must\":{\"match_all\":{}},\n                \"filter\":{\"regexp\":{\n                    \"qid\":\"$input.path('$.query')\"\n                }}\n            }\n            #else\n            \"terms\":{\n                \"qid\":[\n                #foreach($qid in $input.path('$.list'))\n                    \"$qid\"#if($foreach.hasNext),#end\n                #end]\n            }\n            #end\n        }\n    }\n}\n\n\n"
                        }
                    }
                },
                "ResourceId": {
                    "Ref": "Questions"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 204,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4a6e22a0-3e58-494a-8268-75fffa0fbb27"
                }
            }
        },
        "Question": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Questions"
                },
                "PathPart": "{ID}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "47bbf103-9813-4900-8719-b0595b7b1961"
                }
            }
        },
        "QuestionHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "HEAD",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "{\"status\":\"exists\"}\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"HEAD\",\n    \"path\":\"/${Var.QnaIndex}/_all/$util.urlDecode($input.params('ID'))\"\n}\n\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.path.Id": true
                },
                "ResourceId": {
                    "Ref": "Question"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2adadbae-0ae7-4fde-aaac-5e08fc8ec46a"
                }
            }
        },
        "QuestionPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "PUT",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 201,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($Idpath =  '$._id')\n#set($Successpath =  '$._shards.successful')\n\n{\n    \"result\":\"$inputRoot.result\",\n    \"id\":$input.json($Idpath),\n    \"success\":$input.json($Successpath)\n}\n\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n#if($input.json('$.type').length())\n    #set($type=$inputRoot.type)\n#else\n    #set($type=\"qna\")\n#end\n\n{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"PUT\",\n    \"path\":\"/${Var.QnaIndex}/_doc/$input.params('ID')?refresh=wait_for\",\n    \"body\":{\n        #foreach($paramName in $inputRoot.keySet())\n            #if( $paramName == 'q' && $type==\"qna\")\n                ## generate quniqueterms field by concatenating questions in q array\n                \"quniqueterms\":\" #foreach( $q in $inputRoot.get($paramName))$q #end \",\n                ## replace q array with nested questions array\n                \"questions\":[\n                    #foreach( $q in $inputRoot.get($paramName))\n                        {\"q\":\"$q\"}\n                        #if($foreach.hasNext),#end\n                    #end\n                ]\n                #if($foreach.hasNext),#end\n            #else\n                #set( $body =  '$.'+$paramName)\n                \"$paramName\" :$input.json($body) \n                #if($foreach.hasNext),#end\n            #end\n        #end\n    }\n}\n\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.path.Id": true
                },
                "ResourceId": {
                    "Ref": "Question"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 201,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f8397f36-e8f7-4bc3-b19b-286355211bc9"
                }
            }
        },
        "QuestionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "OPTIONS",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "SchemaLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n    \"comment\": \"API mapping no-op since ES 7.x upgrade. Schema now returned directly from SchemaLambda, rather than from Elasticsearch metadata\"\n}\n\n"
                        }
                    }
                },
                "ResourceId": {
                    "Ref": "Questions"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "94be28b7-072b-4440-b285-d961b9ecc526"
                }
            }
        },
        "QuestionDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "DELETE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ESProxyLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 204,
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($Idpath =  '$._id')\n#set($Successpath =  '$._shards.successful')\n\n{\n    \"result\":\"$inputRoot.result\",\n    \"id\":$input.json($Idpath),\n    \"success\":$input.json($Successpath)\n}\n\n"
                                }
                            }
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    \"path\":\"/${Var.QnaIndex}/_delete_by_query?refresh=true\",\n    \"body\":{\n        \"query\":{\n            \"match\":{\n                \"qid\":\"$util.urlDecode($input.params('ID'))\"\n            }\n        }\n    }\n\n}\n\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.path.Id": true
                },
                "ResourceId": {
                    "Ref": "Question"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 204,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d7979701-f282-4b03-9904-ff25624d864b"
                }
            }
        },
        "Static": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "static",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "27081b01-5019-4472-baa8-2758248ab788"
                }
            }
        },
        "Proxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Static"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "30dfe987-9305-49c3-a74b-f1f14bc603d8"
                }
            }
        },
        "ProxyAnyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "Bucket"
                                },
                                "/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type",
                                "method.response.header.api-stage": "context.stage"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "Proxy"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false,
                            "method.response.header.api-stage": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "0e1a457b-c221-4b83-8a26-84b2ded77278"
                }
            }
        },
        "ProxyAnyHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "HEAD",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "HEAD",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "Bucket"
                                },
                                "/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type",
                                "method.response.header.api-stage": "context.stage"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "Proxy"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false,
                            "method.response.header.api-stage": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "ce64a44c-229a-4adb-9c90-2b6d4a4af53b"
                }
            }
        },
        "Login": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "pages",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5286b7f2-ae3c-447b-82cc-a7cfcc2d71d1"
                }
            }
        },
        "DesignerLoginResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Login"
                },
                "PathPart": "designer",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f87ea78e-05a6-4566-aca4-3678dcc3e339"
                }
            }
        },
        "ClientLoginResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Login"
                },
                "PathPart": "client",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "56b5a0a6-0dae-4924-b5af-71d0708490d6"
                }
            }
        },
        "DesignerLoginResourceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.location": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "DesignerLogin",
                                                    "loginUrl"
                                                ]
                                            },
                                            "'"
                                        ]
                                    ]
                                }
                            },
                            "StatusCode": "302"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 302}"
                    }
                },
                "ResourceId": {
                    "Ref": "DesignerLoginResource"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 302,
                        "ResponseParameters": {
                            "method.response.header.location": true
                        }
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "5e93412a-a0c4-495c-9201-3bf91cb1be63"
                }
            }
        },
        "ClientLoginResourceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.location": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "ClientLogin",
                                                    "loginUrl"
                                                ]
                                            },
                                            "'"
                                        ]
                                    ]
                                }
                            },
                            "StatusCode": "302"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 302}"
                    }
                },
                "ResourceId": {
                    "Ref": "ClientLoginResource"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 302,
                        "ResponseParameters": {
                            "method.response.header.location": true
                        }
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "b1c87c29-7d80-4cf4-8afb-08c132b9c1ce"
                }
            }
        },
        "Jobs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "jobs",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e13dbe91-9a20-4949-ad21-a85f8dd5723f"
                }
            }
        },
        "JobsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"_links\":{\n        \"imports\":{\n            \"href\":\"$root/jobs/imports\",\n            \"bucket\":\"${ImportBucket}\",\n            \"uploadPrefix\":\"data/\",\n            \"statusPrefix\":\"Status/\"\n        },\n        \"exports\":{\n            \"href\":\"$root/jobs/exports\"\n        },\n        \"testall\":{\n            \"href\":\"$root/jobs/testall\",\n            \"bucket\":\"${TestAllBucket}\",\n            \"statusPrefix\":\"Status/\"\n        }\n    }\n}\n\n"
                                }
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    }
                },
                "ResourceId": {
                    "Ref": "Jobs"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "52e7a0c5-fe3b-475d-a434-a275bdefd85e"
                }
            }
        },
        "testalls": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Jobs"
                },
                "PathPart": "testall",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7cbdae2f-c3c6-4ff5-900a-255830d941e2"
                }
            }
        },
        "testallsList": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "S3ListLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"bucket\":\"${TestAllBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"testall\",\n    \"root\":\"$root\"\n}\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.perpage": false,
                    "method.request.querystring.token": false
                },
                "ResourceId": {
                    "Ref": "testalls"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "48abd652-cae9-4835-82b3-2c002131786f"
                }
            }
        },
        "testall": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "testalls"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "78c574bc-cf77-405d-961c-754e1319f707"
                }
            }
        },
        "testallPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "PUT",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "PUT",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "TestAllBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"bucket\":\"${TestAllBucket}\",\n    \"index\":\"${Var.QnaIndex}\",\n    \"id\":\"$input.params('proxy')\",\n    \"config\":\"status/$input.params('proxy')\",\n    \"tmp\":\"tmp/$input.params('proxy')\",\n    \"key\":\"data/$input.params('proxy')\",\n    \"filter\":\"$inputRoot.get('filter')\",\n    \"token\":\"$inputRoot.get('token')\",\n    \"status\":\"Started\"\n}\n\n"
                        }
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "testall"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "37558116-4a76-4b0d-b412-28a44454dfb2"
                }
            }
        },
        "testallGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "TestAllBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "testall"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a0752d24-921a-47b9-aded-570e8ee9bb37"
                }
            }
        },
        "testallDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "DELETE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "DELETE",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "TestAllBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "testall"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1ea99709-ca0c-41c3-824a-365a879accaf"
                }
            }
        },
        "exports": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Jobs"
                },
                "PathPart": "exports",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "64adda58-5c5b-4f89-958e-ddf80d6f1917"
                }
            }
        },
        "exportsList": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "S3ListLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"bucket\":\"${ExportBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"exports\",\n    \"root\":\"$root\"\n}\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.perpage": false,
                    "method.request.querystring.token": false
                },
                "ResourceId": {
                    "Ref": "exports"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "29ac4544-65fd-46a1-9aa6-cdc6019c3808"
                }
            }
        },
        "export": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "exports"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3243f321-916b-4667-8e4f-13f3e1426acd"
                }
            }
        },
        "imports": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Jobs"
                },
                "PathPart": "imports",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "638121b4-3c9e-4642-ae39-5590229d6557"
                }
            }
        },
        "exportPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "PUT",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "PUT",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "ExportBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"bucket\":\"${ExportBucket}\",\n    \"index\":\"${Var.QnaIndex}\",\n    \"id\":\"$input.params('proxy')\",\n    \"config\":\"status/$input.params('proxy')\",\n    \"tmp\":\"tmp/$input.params('proxy')\",\n    \"key\":\"$inputRoot.get('prefix')data/$input.params('proxy')\",\n    \"filter\":\"$inputRoot.get('filter')\",\n    \"status\":\"Started\"\n}"
                        }
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "export"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d3fb4dba-aa1b-407e-91f9-3e05090d0a5b"
                }
            }
        },
        "exportGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "ExportBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "export"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "413d6427-9890-430a-b788-109f7d581fe3"
                }
            }
        },
        "exportDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "DELETE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "DELETE",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "ExportBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "export"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3612b4d5-136f-4e2a-8727-c53daf0e7f80"
                }
            }
        },
        "importsList": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "S3ListLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"bucket\":\"${ImportBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"imports\",\n    \"root\":\"$root\"\n}\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.perpage": false,
                    "method.request.querystring.token": false
                },
                "ResourceId": {
                    "Ref": "imports"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "dd98758b-749c-44c0-bc83-c0e364a05402"
                }
            }
        },
        "import": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "imports"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "dc2fc332-e5fa-4859-9de2-7a95d010aec4"
                }
            }
        },
        "importGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "ImportBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "import"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0d7a11a9-fbc5-4770-b5d0-2c262a75adfc"
                }
            }
        },
        "importDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "DELETE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "DELETE",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "ImportBucket"
                                },
                                "/status/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Job not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "import"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b179f181-f09f-4fea-900b-8c14388f409c"
                }
            }
        },
        "S3ListLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n        .then(x => {\n            if (x.Contents && Array.isArray(x.Contents)) {\n                x.Contents.sort((a, b) => {\n                    if (a.LastModified && b.LastModified) {\n                        return new Date(b.LastModified).getTime() - new Date(a.LastModified).getTime();\n                    } else {\n                        return 0;\n                    }\n                })\n            }\n            callback(null, {\n            token:x.NextMarker,\n            jobs:x.Contents.map(y=>{return {\n                id:y.Key.split('/').pop(),\n                href:`${event.root}/jobs/${event.type}/`+encodeURI(y.Key.split('/').pop())\n            }})\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "S3ListLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "27673428-2b40-4457-9ff0-2b6c7d539c1a"
                }
            }
        },
        "S3ListLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "S3ListPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "S3:List*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "0261d26a-9e13-409d-a41b-7ed20d477f1b"
                }
            }
        },
        "Examples": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "examples",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b720141d-49f2-4b5d-9d51-15db2c556c69"
                }
            }
        },
        "ExamplesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n\n{\n    \"_links\":{\n        \"documents\":{\n            \"href\":\"$root/examples/documents\"\n        },\n        \"photos\":{\n            \"href\":\"$root/examples/photos\"\n        }\n    }\n}\n\n"
                                }
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    }
                },
                "ResourceId": {
                    "Ref": "Examples"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "981ca2a5-af09-4c81-a4dd-4fbf4013ce7a"
                }
            }
        },
        "photos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Examples"
                },
                "PathPart": "photos",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ca243504-43a5-4b66-918b-9dea7ba9bb97"
                }
            }
        },
        "photosList": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ExampleS3ListPhotoLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"bucket\":\"${AssetBucket}\",\n    \"prefix\":\"examples/photos/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"root\":\"$root\"\n}\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.perpage": false,
                    "method.request.querystring.token": false
                },
                "ResourceId": {
                    "Ref": "photos"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1822dbd1-5bae-40c0-9752-dfa6d57144c3"
                }
            }
        },
        "photo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "photos"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5beb5105-5d30-4b7c-a41e-1dc1f58ecd9f"
                }
            }
        },
        "photoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "AssetBucket"
                                },
                                "/examples/photos/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Not Found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "photo"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e7b94409-fea8-44b6-9dbf-a657cc651949"
                }
            }
        },
        "Documents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Examples"
                },
                "PathPart": "documents",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0ed95d8b-618f-422f-b3b1-3a093b895ab5"
                }
            }
        },
        "DocumentsList": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "ExampleS3ListLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "SelectionPattern": ".*[InternalServiceError].*",
                            "StatusCode": 500,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[BadRequest].*",
                            "StatusCode": 400,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[Conflict].*",
                            "StatusCode": 409,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        },
                        {
                            "SelectionPattern": ".*[NotFound].*",
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
                            }
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Sub": "#set ($root=\"https://${!context.domainName}/${!context.stage}\")\n\n{\n    \"bucket\":\"${AssetBucket}\",\n    \"prefix\":\"examples/documents/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"root\":\"$root\"\n}\n\n"
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.perpage": false,
                    "method.request.querystring.token": false
                },
                "ResourceId": {
                    "Ref": "Documents"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.date": true
                        }
                    },
                    {
                        "StatusCode": 404
                    },
                    {
                        "StatusCode": 500
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6db309fc-ff7d-459e-b9bb-1942ffe82ec3"
                }
            }
        },
        "Example": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Documents"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4da75463-5355-40e6-8d76-91d918c83442"
                }
            }
        },
        "ExampleGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "AssetBucket"
                                },
                                "/examples/documents/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Not Found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "Example"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c755cad5-25cc-4057-84f2-0220e67a5e9f"
                }
            }
        },
        "ExampleHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "HEAD",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "HEAD",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "AssetBucket"
                                },
                                "/examples/documents/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Not Found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "Example"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "40d0d60f-5ed6-4099-90ee-bc6a357b6c89"
                }
            }
        },
        "ExampleS3ListLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.photos = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var photos=x.Contents.map(function(value){\n            var key=value.Key.split('/').pop()\n            return `${event.root}/examples/photos/${key}`\n        },[])\n        callback(null,{\n            token:x.NextMarker,\n            photos\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\nexports.documents = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var examples=x.Contents.reduce(function(accum,value){\n            var key=value.Key.split('/').pop().split('.')\n            var ext=key.length >1 ? key.pop() : 'txt'\n            key=key[0]\n            var href=`${event.root}/examples/documents/${key}.${ext}`\n            if(!accum[key]){\n                accum[key]={id:key}\n            }\n            if(ext==='json'){\n                accum[key].document={href}\n            }else{\n                accum[key].description={href}\n            }\n            return accum\n        },[])\n        \n        callback(null,{\n            token:x.NextMarker,\n            examples:Object.keys(examples).map(x=>examples[x])\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
                },
                "Handler": "index.documents",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "S3ListLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "e56ca30c-4097-4fe9-9b1b-a2349b4df45a"
                }
            }
        },
        "ExampleS3ListPhotoLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.photos = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var photos=x.Contents.map(function(value){\n            var key=value.Key.split('/').pop()\n            return `${event.root}/examples/photos/${key}`\n        },[])\n        callback(null,{\n            token:x.NextMarker,\n            photos\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\nexports.documents = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var examples=x.Contents.reduce(function(accum,value){\n            var key=value.Key.split('/').pop().split('.')\n            var ext=key.length >1 ? key.pop() : 'txt'\n            key=key[0]\n            var href=`${event.root}/examples/documents/${key}.${ext}`\n            if(!accum[key]){\n                accum[key]={id:key}\n            }\n            if(ext==='json'){\n                accum[key].document={href}\n            }else{\n                accum[key].description={href}\n            }\n            return accum\n        },[])\n        \n        callback(null,{\n            token:x.NextMarker,\n            examples:Object.keys(examples).map(x=>examples[x])\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
                },
                "Handler": "index.photos",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "S3ListLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "73832b8d-0d7f-43b5-a74d-4f31f98c572d"
                }
            }
        },
        "Services": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "services",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "75cab832-7ead-4c19-8afc-0c4ebb9bb392"
                }
            }
        },
        "ServicesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": {
                                    "Fn::Sub": "{\n    \"elasticsearch\":{\n        \"qid\":\"${ESQidLambda.Arn}\",\n        \"proxy\":\"${ESProxyLambda.Arn}\"\n    }\n}\n\n"
                                }
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    }
                },
                "ResourceId": {
                    "Ref": "Services"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "936d678a-8536-4458-8b43-3f1ebabf98d2"
                }
            }
        },
        "Images": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "images",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "95b4b419-c0d0-4e05-b1fa-84f72687fa91"
                }
            }
        },
        "ImagesProxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "Images"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "15b79b22-8c78-4e71-b862-da447f2d2532"
                }
            }
        },
        "ImagesProxyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "GET",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "S3AccessRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":s3:path/",
                                {
                                    "Ref": "Bucket"
                                },
                                "/assets/{proxy}"
                            ]
                        ]
                    },
                    "RequestParameters": {
                        "integration.request.path.proxy": "method.request.path.proxy"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ContentHandling": "CONVERT_TO_BINARY",
                            "ResponseParameters": {
                                "method.response.header.content-type": "integration.response.header.Content-Type",
                                "method.response.header.api-stage": "context.stage"
                            }
                        },
                        {
                            "StatusCode": 404,
                            "ResponseTemplates": {
                                "application/xml": "{\"error\":\"Not found\"}"
                            },
                            "SelectionPattern": "403"
                        }
                    ]
                },
                "RequestParameters": {
                    "method.request.path.proxy": false
                },
                "ResourceId": {
                    "Ref": "ImagesProxy"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseParameters": {
                            "method.response.header.content-type": false,
                            "method.response.header.api-stage": false
                        }
                    },
                    {
                        "StatusCode": 400
                    },
                    {
                        "StatusCode": 404
                    }
                ],
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "This ApiGateway Method does not need authorization setup"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "aa4f4acc-ccd0-483a-a9fd-50c2d6ce6c86"
                }
            }
        },
        "Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Delete",
            "Properties": {
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html"
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                },
                "BucketEncryption": {
                    "Fn::If": [
                        "Encrypted",
                        {
                            "ServerSideEncryptionConfiguration": [
                                {
                                    "ServerSideEncryptionByDefault": {
                                        "SSEAlgorithm": "AES256"
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Access logging is not required for this Bucket."
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "3c921695-58d1-4bbd-bd17-624c9deb6781"
                }
            }
        },
        "HTTPSOnlyBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "Bucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "Bucket",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4bf9b9cd-8409-47e1-b37f-2fdf8d5afc55"
                }
            }
        },
        "Clear": {
            "Type": "Custom::S3Clear",
            "DependsOn": [
                "CFNInvokePolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Ref": "Bucket"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d334d9e7-b4b8-4817-aa22-b473dfeec937"
                }
            }
        },
        "Unzip": {
            "Type": "Custom::S3Unzip",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "SrcBucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Join": [
                        "",
                        [
                            "qnabot-on-aws/v5.3.1",
                            "/website.zip"
                        ]
                    ]
                },
                "DstBucket": {
                    "Ref": "Bucket"
                },
                "buildDate": "2023-03-15T17:43:20.580Z"
            },
            "DependsOn": "Clear",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "bfd47919-25fb-4f7f-bc35-8d1e8e0fbeb1"
                }
            }
        },
        "S3AccessRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "apigateway.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "S3AccessPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ImportBucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${TestAllBucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${Bucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${AssetBucket}/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${TestAllBucket}/*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ImportBucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${TestAllBucket}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a95bbe2c-5705-45bc-a43f-c348d2377a88"
                }
            }
        },
        "SagemakerEmbeddingsStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "EmbeddingsSagemaker",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://solutions-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/qnabot-on-aws/v5.3.1/templates/sagemaker-embeddings.json"
                },
                "Parameters": {
                    "CFNLambda": {
                        "Fn::GetAtt": [
                            "CFNLambda",
                            "Arn"
                        ]
                    },
                    "BootstrapBucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "BootstrapPrefix": "qnabot-on-aws/v5.3.1",
                    "SagemakerInitialInstanceCount": {
                        "Ref": "SagemakerInitialInstanceCount"
                    },
                    "VPCSubnetIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "VPCSecurityGroupIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "53aba874-8b8b-473c-844e-56f43f6fe398"
                }
            }
        },
        "SchemaLambdaCodeVersion": {
            "Type": "Custom::S3Version",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::Sub": "solutions-${AWS::Region}"
                },
                "Key": {
                    "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/schema.zip"
                },
                "BuildDate": "2023-03-15T17:43:20.580Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6703b069-bf85-4ab0-8b11-0ffd525f6cd8"
                }
            }
        },
        "SchemaLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "qnabot-on-aws/v5.3.1/lambda/schema.zip"
                    },
                    "S3ObjectVersion": {
                        "Ref": "SchemaLambdaCodeVersion"
                    }
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "SchemaLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Api"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "94350c82-2095-4377-8816-1afdbe98355c"
                }
            }
        },
        "SchemaLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    }
                ],
                "ManagedPolicyArns": [
                    {
                        "Ref": "QueryPolicy"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "75ed6f7b-4ef9-4833-abed-cec3701fa20d"
                }
            }
        },
        "SignupPermision": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "SignupLambda",
                        "Arn"
                    ]
                },
                "Principal": "cognito-idp.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "UserPool",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a6c8e241-ac8a-489d-8139-13eb9a9c9e70"
                }
            }
        },
        "MessagePermision": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "MessageLambda",
                        "Arn"
                    ]
                },
                "Principal": "cognito-idp.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "UserPool",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3d3a2786-37de-482d-9d34-f323a585a028"
                }
            }
        },
        "MessageLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "exports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var approvedDomain = process.env.APPROVED_DOMAIN;\n\n    if(approvedDomain){\n        var regex=new RegExp(`^[A-Za-z0-9._%+-]+@${approvedDomain}$`)\n        if (event.request.userAttributes.email.match(regex)) {\n            event.response.emailSubject = subject;\n            event.response.emailMessage = message(\n                event.request.codeParameter,\n                event.request.usernameParameter\n            );\n            context.done(null, event);\n        } else {\n            var error = new Error('EMAIL_DOMAIN_DENIED_ERR');\n            context.done(error, event);\n        }\n    }else{\n        event.response.emailSubject = subject;\n        event.response.emailMessage = message(event.request.codeParameter);\n        context.done(null, event);\n    }\n};\n\nvar subject=\"QnABot Signup Verification Code\";\nfunction message(code,name){\n    return `Hello, Your QnABot verification code is: ${code}`\n}\n\n"
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Environment": {
                    "Variables": {
                        "APPROVED_DOMAIN": {
                            "Fn::If": [
                                "Domain",
                                "EMPTY",
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "SignupLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Cognito"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "aef10afb-c078-4038-bdb4-41073d35f4f1"
                }
            }
        },
        "SignupLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "exports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var approvedDomain = process.env.APPROVED_DOMAIN;\n    \n    if(approvedDomain){\n        var regex=new RegExp(`^[A-Za-z0-9._%+-]+@${approvedDomain}$`)\n        if (event.request.userAttributes.email.match(regex)) {\n            context.done(null, event);\n        }else{\n            var error = new Error('EMAIL_DOMAIN_DENIED_ERR');\n            context.done(error, event);\n        }\n    }else{\n        context.done(null,event) \n    }\n};\n\n"
                },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Environment": {
                    "Variables": {
                        "APPROVED_DOMAIN": {
                            "Fn::If": [
                                "Domain",
                                "EMPTY",
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "SignupLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs16.x",
                "Timeout": 300,
                "VpcConfig": {
                    "Fn::If": [
                        "VPCEnabled",
                        {
                            "SubnetIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ],
                            "SecurityGroupIds": [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "TracingConfig": {
                    "Fn::If": [
                        "XRAYEnabled",
                        {
                            "Mode": "Active"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Cognito"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W92",
                            "reason": "This lambda function does not require to have ReservedConcurrentExecutions"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "1e3803d6-be2c-43cc-9e46-05d0a4c8512c"
                }
            }
        },
        "SignupLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "e475da09-d5d5-482e-97d2-eb9fae320a55"
                }
            }
        },
        "TestAllStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://solutions-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/qnabot-on-aws/v5.3.1/templates/testall.json"
                },
                "Parameters": {
                    "CFNLambda": {
                        "Fn::GetAtt": [
                            "CFNLambda",
                            "Arn"
                        ]
                    },
                    "CFNInvokePolicy": {
                        "Ref": "CFNInvokePolicy"
                    },
                    "LexV2BotId": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botId"
                        ]
                    },
                    "LexV2BotAliasId": {
                        "Fn::GetAtt": [
                            "LexV2Bot",
                            "botAliasId"
                        ]
                    },
                    "BootstrapBucket": {
                        "Fn::Sub": "solutions-${AWS::Region}"
                    },
                    "BootstrapPrefix": "qnabot-on-aws/v5.3.1",
                    "VarIndex": {
                        "Fn::GetAtt": [
                            "Var",
                            "QnaIndex"
                        ]
                    },
                    "EsEndpoint": {
                        "Fn::GetAtt": [
                            "ESVar",
                            "ESAddress"
                        ]
                    },
                    "EsProxyLambda": {
                        "Fn::GetAtt": [
                            "ESProxyLambda",
                            "Arn"
                        ]
                    },
                    "TestAllBucket": {
                        "Ref": "TestAllBucket"
                    },
                    "VPCSubnetIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "VPCSecurityGroupIdList": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        ]
                    },
                    "XraySetting": {
                        "Ref": "XraySetting"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9eb2963d-8c4c-42ec-a960-d17ea33b1599"
                }
            }
        },
        "Var": {
            "Type": "Custom::Variable",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "index": {
                    "value": {
                        "Ref": "AWS::StackName"
                    },
                    "op": "toLowerCase"
                },
                "QnAType": "qna",
                "QuizType": "quiz",
                "QnaIndex": {
                    "value": {
                        "Fn::Sub": "${AWS::StackName}"
                    },
                    "op": "toLowerCase"
                },
                "MetricsIndex": {
                    "value": {
                        "Fn::Sub": "${AWS::StackName}-metrics"
                    },
                    "op": "toLowerCase"
                },
                "FeedbackIndex": {
                    "value": {
                        "Fn::Sub": "${AWS::StackName}-feedback"
                    },
                    "op": "toLowerCase"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b13feed9-251b-471e-903c-b0c0f709ab33"
                }
            }
        },
        "InfoVar": {
            "Type": "Custom::Variable",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Version": "5.3.1",
                "BuildDateString": "Wed Mar 15 2023 17:43:20 GMT+0000 (Coordinated Universal Time)",
                "BuildDate": "2023-03-15T17:43:20.581Z"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "da6d08b3-a009-42f9-a9b7-6d15bd8e3088"
                }
            }
        },
        "ESVar": {
            "Type": "Custom::Variable",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "ESArn": {
                    "Fn::If": [
                        "CreateDomain",
                        {
                            "Fn::GetAtt": [
                                "OpensearchDomain",
                                "DomainArn"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "ESInfo",
                                "Arn"
                            ]
                        }
                    ]
                },
                "ESAddress": {
                    "Fn::If": [
                        "CreateDomain",
                        {
                            "Fn::GetAtt": [
                                "OpensearchDomain",
                                "DomainEndpoint"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "ESInfo",
                                "Endpoint"
                            ]
                        }
                    ]
                },
                "ESDomain": {
                    "Fn::If": [
                        "CreateDomain",
                        {
                            "Ref": "OpensearchDomain"
                        },
                        "EMPTY"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5ca6d044-43f2-4b6a-83ef-f217f0a6b2db"
                }
            }
        },
        "ApiUrl": {
            "Type": "Custom::Variable",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "https://",
                            {
                                "Ref": "API"
                            },
                            ".execute-api.",
                            {
                                "Ref": "AWS::Region"
                            },
                            ".amazonaws.com/prod"
                        ]
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "850fe11e-8c5e-42c4-9a6d-b6d0d5d781c9"
                }
            }
        },
        "Urls": {
            "Type": "Custom::Variable",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "Designer": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Fn::GetAtt": [
                                    "ApiUrl",
                                    "Name"
                                ]
                            },
                            "/static/index.html"
                        ]
                    ]
                },
                "Client": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Fn::GetAtt": [
                                    "ApiUrl",
                                    "Name"
                                ]
                            },
                            "/static/client.html"
                        ]
                    ]
                },
                "Kibana": {
                    "Fn::Sub": "${ESVar.ESAddress}/_dashboards/app/dashboards#/list"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cb03039d-72f9-4e01-b366-e695610310d8"
                }
            }
        },
        "API": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Ref": "AWS::StackName"
                },
                "Description": "An Api interface for the admin actions on the QNA bot",
                "BinaryMediaTypes": [
                    "image/png"
                ],
                "MinimumCompressionSize": 500000
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                }
            }
        },
        "Deployment": {
            "Type": "Custom::ApiDeployment",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CFNLambda",
                        "Arn"
                    ]
                },
                "restApiId": {
                    "Ref": "API"
                },
                "buildDate": "2023-03-15T17:43:20.583Z",
                "stage": "prod",
                "Encryption": {
                    "Ref": "Encryption"
                },
                "LexV2BotLocaleIds": {
                    "Ref": "LexV2BotLocaleIds"
                }
            },
            "DependsOn": [
                "AlexaSchema",
                "BotPost",
                "BotGet",
                "HealthGet",
                "rootGet",
                "QuestionsGet",
                "QuestionsDelete",
                "QuestionHead",
                "QuestionPut",
                "QuestionsOptions",
                "QuestionDelete",
                "ProxyAnyGet",
                "ProxyAnyHead",
                "DesignerLoginResourceGet",
                "ClientLoginResourceGet",
                "JobsGet",
                "testallsList",
                "testallPut",
                "testallGet",
                "testallDelete",
                "exportsList",
                "exportPut",
                "exportGet",
                "exportDelete",
                "importsList",
                "importGet",
                "importDelete",
                "ExamplesGet",
                "photosList",
                "photoGet",
                "DocumentsList",
                "ExampleGet",
                "ExampleHead",
                "ServicesGet",
                "ImagesProxyGet",
                "InvokePermissionLexBuildLambdaStart",
                "InvokePermissionLexv2BotLambda",
                "InvokePermissionUtteranceLambda",
                "InvokePermissionESQidLambda",
                "InvokePermissionESCleaningLambda",
                "InvokePermissionESProxyLambda",
                "InvokePermissionLexProxyLambda",
                "InvokePermissionS3ListLambda",
                "InvokePermissionExampleS3ListLambda",
                "InvokePermissionExampleS3ListPhotoLambda",
                "InvokePermissionSchemaLambda"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ae5a57e6-1f64-499b-bd53-385e9dc499bf"
                }
            }
        },
        "Stage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "Deployment"
                },
                "RestApiId": {
                    "Ref": "API"
                },
                "StageName": "prod",
                "MethodSettings": [
                    {
                        "DataTraceEnabled": true,
                        "HttpMethod": "*",
                        "LoggingLevel": "INFO",
                        "ResourcePath": "/*"
                    }
                ],
                "Variables": {
                    "Id": "QnABot",
                    "Region": {
                        "Ref": "AWS::Region"
                    },
                    "CognitoEndpoint": {
                        "Fn::GetAtt": [
                            "DesignerLogin",
                            "Domain"
                        ]
                    },
                    "DesignerLoginUrl": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::GetAtt": [
                                        "ApiUrl",
                                        "Name"
                                    ]
                                },
                                "/pages/designer"
                            ]
                        ]
                    },
                    "ClientLoginUrl": {
                        "Fn::If": [
                            "Public",
                            {
                                "Fn::GetAtt": [
                                    "Urls",
                                    "Client"
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "ApiUrl",
                                                "Name"
                                            ]
                                        },
                                        "/pages/client"
                                    ]
                                ]
                            }
                        ]
                    }
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W64",
                            "reason": "This apiGateway stage does not require to be associated with a usage plan"
                        },
                        {
                            "id": "W69",
                            "reason": "This apiGateway stage does not require to have access logging"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "b2febf9d-b15e-4f4d-8d2a-34b062a68987"
                }
            }
        },
        "ApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": [
                        "ApiGatewayCloudWatchLogsRole",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "beb38a7c-e2aa-4da0-a6d0-b181f48d0b29"
                }
            }
        },
        "DocumentationVersion": {
            "Type": "AWS::ApiGateway::DocumentationVersion",
            "DependsOn": [
                "BotDoc"
            ],
            "Properties": {
                "Description": "",
                "DocumentationVersion": "1.0",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "64ccb2fd-c480-4379-8137-0ed40f3eb852"
                }
            }
        },
        "InvokePermissionLexBuildLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LexBuildLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9ebd490a-cfea-46e5-948f-7f57b89d2133"
                }
            }
        },
        "InvokePermissionLexBuildLambdaStart": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LexBuildLambdaStart",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "27a3f9e0-8e54-4f07-8db2-d76294607829"
                }
            }
        },
        "InvokePermissionLexBuildLambdaPoll": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LexBuildLambdaPoll",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "67f02f83-c456-4534-aa25-5b4d9af5ffc3"
                }
            }
        },
        "InvokePermissionLexv2BotLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "Lexv2BotLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1214e3a8-060d-4912-b648-9a88bce5e75e"
                }
            }
        },
        "InvokePermissionUtteranceLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UtteranceLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "70332a35-aaff-4638-87fa-27e7e6e50aec"
                }
            }
        },
        "InvokePermissionESQidLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ESQidLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "72555aa3-2ca6-4791-b16a-65aa280d2ab2"
                }
            }
        },
        "InvokePermissionESCleaningLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ESCleaningLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b606f946-cc69-4caf-911d-a19b87989558"
                }
            }
        },
        "InvokePermissionESProxyLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ESProxyLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a27305e6-f226-4cc1-8ba3-17e01eae8ade"
                }
            }
        },
        "InvokePermissionLexProxyLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LexProxyLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "385efd5e-7de2-4841-9c44-2e5f2ac84d2a"
                }
            }
        },
        "InvokePermissionLexStatusLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LexStatusLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ab95fbe7-7129-4669-b050-10ebcb5fedab"
                }
            }
        },
        "InvokePermissionS3ListLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "S3ListLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b46868cf-61ec-482d-97c5-3d50756e66dc"
                }
            }
        },
        "InvokePermissionExampleS3ListLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ExampleS3ListLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7473643e-e201-4f30-ae7b-b467ffc2b54c"
                }
            }
        },
        "InvokePermissionExampleS3ListPhotoLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ExampleS3ListPhotoLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "bda560a5-9c0e-410a-9d17-a2051ec76d08"
                }
            }
        },
        "InvokePermissionSchemaLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "SchemaLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "85cd0c78-dd36-41b4-93d8-8808ddc16a13"
                }
            }
        },
        "LambdaAccessRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "apigateway.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateNetworkInterface",
                                        "ec2:AssignPrivateIpAddresses",
                                        "ec2:UnassignPrivateIpAddresses",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "lambdaVPCAccessExecutionRole"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords",
                                        "xray:GetSamplingRules",
                                        "xray:GetSamplingTargets",
                                        "xray:GetSamplingStatisticSummaries"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "xrayDaemonWriteAccess"
                    },
                    {
                        "PolicyName": "LambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "This IAM role requires to have * resource on its permission policy"
                        },
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray"
                        },
                        {
                            "id": "F3",
                            "reason": "This role policy is required to have * action in its policy"
                        }
                    ]
                },
                "AWS::CloudFormation::Designer": {
                    "id": "b520d708-c27f-432f-9d14-bfde7c591fe7"
                }
            }
        },
        "dashboard": {
            "Type": "AWS::CloudWatch::Dashboard",
            "Properties": {
                "DashboardName": {
                    "Fn::Sub": "${AWS::Region}-${AWS::StackName}"
                },
                "DashboardBody": {
                    "Fn::Sub": "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# QnABot:${AWS::StackName} Dashboard\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":3,\"properties\":{\"markdown\":\"## ElasticSearch\"}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ReadLatency\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"]],\"region\":\"${AWS::Region}\"},\"x\":0,\"y\":5},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ReadIOPS\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"],[\".\",\"ReadThroughput\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}]],\"region\":\"${AWS::Region}\"},\"x\":6,\"y\":5},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"CPUUtilization\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"]],\"region\":\"${AWS::Region}\"},\"x\":12,\"y\":5},{\"type\":\"metric\",\"x\":18,\"y\":5,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ClusterUsedSpace\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"],[\".\",\"SearchableDocuments\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ClusterStatus.green\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\",{\"color\":\"#2ca02c\"}],[\".\",\"ClusterStatus.red\",\".\",\".\",\".\",\".\",{\"color\":\"#d62728\"}],[\".\",\"ClusterStatus.yellow\",\".\",\".\",\".\",\".\",{\"color\":\"#bcbd22\"}]],\"region\":\"${AWS::Region}\"},\"x\":0,\"y\":11},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":24,\"properties\":{\"markdown\":\"## Lambda Function\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":26,\"properties\":{\"markdown\":\"### CustomResource\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${VersionLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"VersionLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":28},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":28},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESCFNProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESCFNProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":28},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":34,\"properties\":{\"markdown\":\"### Fulfillment\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${FulfillmentLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"FulfillmentLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":36},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":42,\"properties\":{\"markdown\":\"### Warmer\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESWarmerLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESWarmerLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":44},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":50,\"properties\":{\"markdown\":\"### Api\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":52},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambdaStart}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambdaStart\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":52},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambdaPoll}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambdaPoll\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":52},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${Lexv2BotLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"Lexv2BotLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":52},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":58},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexStatusLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexStatusLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":58},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${S3ListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"S3ListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":58},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExampleS3ListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExampleS3ListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":58},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExampleS3ListPhotoLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExampleS3ListPhotoLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":64},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SchemaLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SchemaLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":64},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":70,\"properties\":{\"markdown\":\"### Service\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${UtteranceLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"UtteranceLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":72},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESQidLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESQidLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":72},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESCleaningLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESCleaningLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":72},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":72},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":78,\"properties\":{\"markdown\":\"### Logging\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESLoggingLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESLoggingLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":80},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":86,\"properties\":{\"markdown\":\"### Query\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESQueryLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESQueryLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":88},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":94,\"properties\":{\"markdown\":\"### Cognito\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${MessageLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"MessageLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":96},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SignupLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SignupLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":96}]}"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "92c95ec5-f36d-4086-8d81-a1690583c506"
                }
            }
        }
    },
    "Conditions": {
        "Public": {
            "Fn::Equals": [
                {
                    "Ref": "PublicOrPrivate"
                },
                "PUBLIC"
            ]
        },
        "Encrypted": {
            "Fn::Equals": [
                {
                    "Ref": "Encryption"
                },
                "ENCRYPTED"
            ]
        },
        "AdminSignUp": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "XRAYEnabled": {
            "Fn::Equals": [
                {
                    "Ref": "XraySetting"
                },
                "TRUE"
            ]
        },
        "Domain": {
            "Fn::Equals": [
                true,
                false
            ]
        },
        "BuildExamples": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateDomain": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "DontCreateDomain": {
            "Fn::Equals": [
                true,
                false
            ]
        },
        "CreateLexV1Bots": {
            "Fn::Equals": [
                {
                    "Ref": "LexBotVersion"
                },
                "LexV1 and LexV2"
            ]
        },
        "VPCEnabled": {
            "Fn::Equals": [
                true,
                false
            ]
        },
        "CreateConcurrency": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "FulfillmentConcurrency"
                        },
                        "0"
                    ]
                }
            ]
        },
        "SingleNode": {
            "Fn::Equals": [
                {
                    "Ref": "ElasticSearchNodeCount"
                },
                "1"
            ]
        },
        "EmbeddingsEnable": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EmbeddingsApi"
                        },
                        "DISABLED"
                    ]
                }
            ]
        },
        "EmbeddingsSagemaker": {
            "Fn::Equals": [
                {
                    "Ref": "EmbeddingsApi"
                },
                "SAGEMAKER"
            ]
        },
        "EmbeddingsLambda": {
            "Fn::Equals": [
                {
                    "Ref": "EmbeddingsApi"
                },
                "LAMBDA"
            ]
        },
        "EmbeddingsLambdaArn": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EmbeddingsLambdaArn"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(SO0189) QnABot with admin and client websites - (Version v5.3.1)",
    "Mappings": {},
    "Outputs": {
        "ContentDesignerURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::GetAtt": [
                                "ApiUrl",
                                "Name"
                            ]
                        },
                        "/pages/designer"
                    ]
                ]
            }
        },
        "ClientURL": {
            "Value": {
                "Fn::If": [
                    "Public",
                    {
                        "Fn::GetAtt": [
                            "Urls",
                            "Client"
                        ]
                    },
                    {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::GetAtt": [
                                        "ApiUrl",
                                        "Name"
                                    ]
                                },
                                "/pages/client"
                            ]
                        ]
                    }
                ]
            }
        },
        "DashboardURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://console.aws.amazon.com/cloudwatch/home?",
                        "region=",
                        {
                            "Ref": "AWS::Region"
                        },
                        "#dashboards:name=",
                        {
                            "Ref": "dashboard"
                        }
                    ]
                ]
            }
        },
        "UserPoolURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://console.aws.amazon.com/cognito/users/",
                        "?region=",
                        {
                            "Ref": "AWS::Region"
                        },
                        "#/pool/",
                        {
                            "Ref": "UserPool"
                        },
                        "/details"
                    ]
                ]
            }
        },
        "LexV1BotName": {
            "Condition": "CreateLexV1Bots",
            "Value": {
                "Ref": "LexBot"
            }
        },
        "LexV1BotAlias": {
            "Condition": "CreateLexV1Bots",
            "Value": {
                "Ref": "VersionAlias"
            }
        },
        "LexV1Intent": {
            "Condition": "CreateLexV1Bots",
            "Value": {
                "Ref": "Intent"
            }
        },
        "LexV1IntentFallback": {
            "Condition": "CreateLexV1Bots",
            "Value": {
                "Ref": "IntentFallback"
            }
        },
        "LexV2BotName": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botName"
                ]
            }
        },
        "LexV2BotId": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botId"
                ]
            }
        },
        "LexV2BotAlias": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botAlias"
                ]
            }
        },
        "LexV2BotAliasId": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botAliasId"
                ]
            }
        },
        "LexV2Intent": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botIntent"
                ]
            }
        },
        "LexV2IntentFallback": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botIntentFallback"
                ]
            }
        },
        "LexV2BotLocaleIds": {
            "Value": {
                "Fn::GetAtt": [
                    "LexV2Bot",
                    "botLocaleIds"
                ]
            }
        },
        "FeedbackSNSTopic": {
            "Value": {
                "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.FeedbackSNSTopic"
                ]
            }
        },
        "ESProxyLambda": {
            "Value": {
                "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn"
                ]
            }
        },
        "ElasticsearchEndpoint": {
            "Value": {
                "Fn::GetAtt": [
                    "ESVar",
                    "ESAddress"
                ]
            }
        },
        "ElasticsearchIndex": {
            "Value": {
                "Fn::GetAtt": [
                    "Var",
                    "index"
                ]
            }
        }
    },
    "Parameters": {
        "Email": {
            "Type": "String",
            "Description": "Required: Email address for the admin user. Will be used for logging in and for setting the admin password. This email will receive the temporary password for the admin user.",
            "AllowedPattern": ".+\\@.+\\..+",
            "ConstraintDescription": "Must be valid email address eg. johndoe@example.com"
        },
        "Username": {
            "Type": "String",
            "Description": "Administrator username",
            "Default": "Admin"
        },
        "DefaultKendraIndexId": {
            "Type": "String",
            "Description": "Optional: Index ID of an existing Kendra index, used as the default index for QnABot's Kendra integration. You can use the QnABot Content Designer to reconfigure Kendra Index ID settings at any time.",
            "Default": ""
        },
        "Encryption": {
            "Type": "String",
            "Description": "Enables encryption at rest for S3 and ElasticSearch, and provisions m6g.large.elasticsearch instances - recommended for production deployments. Selecting the unencrypted configuration provisions lower cost t3.small.elasticsearch instances. See https://aws.amazon.com/elasticsearch-service/pricing/.",
            "AllowedValues": [
                "ENCRYPTED",
                "UNENCRYPTED"
            ],
            "Default": "ENCRYPTED",
            "ConstraintDescription": "Allowed Values are UNENCRYPTED or ENCRYPTED"
        },
        "ElasticSearchNodeCount": {
            "Type": "String",
            "Description": "Number of nodes in ElasticSearch domain - '4' is recommended for fault tolerant production deployments.",
            "AllowedValues": [
                "1",
                "2",
                "4"
            ],
            "Default": "4"
        },
        "KibanaDashboardRetentionMinutes": {
            "Type": "Number",
            "Description": "To conserve storage in Amazon ElasticSearch, metrics and feedback data used to populate the Kibana dashboard are automatically deleted after this period (default 43200 minutes = 30 days). Monitor 'Free storage space' for your ElasticSearch domain to ensure that you have sufficient space available to store data for the desired retention period.",
            "Default": 43200
        },
        "PublicOrPrivate": {
            "Type": "String",
            "Description": "Choose whether access to the QnABot client should be publicly available or restricted to users in QnABot UserPool.",
            "AllowedValues": [
                "PUBLIC",
                "PRIVATE"
            ],
            "Default": "PRIVATE"
        },
        "LexV2BotLocaleIds": {
            "Description": "Languages for QnABot voice interaction using LexV2. Specify as a comma separated list of valid Locale IDs without empty spaces - see https://github.com/aws-solutions/aws-qnabot/blob/main/docs/multilanguage_support.md#supported-languages",
            "Type": "String",
            "Default": "en_US,es_US,fr_CA"
        },
        "LexBotVersion": {
            "Description": "Lex versions to use for QnABot. Select 'LexV2 Only' to install QnABot in AWS reqions where LexV1 is not supported.",
            "Type": "String",
            "AllowedValues": [
                "LexV1 and LexV2",
                "LexV2 Only"
            ],
            "Default": "LexV2 Only"
        },
        "InstallLexResponseBots": {
            "Description": "If Elicit Response feature is not needed, choose 'false' to skip sample Lex Response Bot installation.",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true"
        },
        "FulfillmentConcurrency": {
            "Type": "Number",
            "Description": "The amount of provisioned concurrency for the fulfillment Lambda function",
            "Default": 0
        },
        "XraySetting": {
            "Type": "String",
            "Description": "Configure Lambdas with X-Ray enabled",
            "AllowedValues": [
                "FALSE",
                "TRUE"
            ],
            "Default": "FALSE",
            "ConstraintDescription": "Allowed Values are FALSE or TRUE"
        },
        "EmbeddingsApi": {
            "Type": "String",
            "Description": "Optionally enable (experimental) QnABot Semantics Search using Embeddings from a pre-trained Large Language Model. If set to SAGEMAKER, an ml.m5.xlarge Sagemaker endpoint is automatically provisioned with Hugging Face e5-large model. To use a custom LAMBDA function, provide additional parameters below.",
            "AllowedValues": [
                "DISABLED",
                "SAGEMAKER",
                "LAMBDA"
            ],
            "Default": "DISABLED"
        },
        "SagemakerInitialInstanceCount": {
            "Type": "Number",
            "MinValue": 0,
            "Description": "Optional: If EmbeddingsApi is SAGEMAKER, provide initial instance count. Set to '0' to enable Serverless Inference (for cold-start delay tolerant deployments only).",
            "Default": 1
        },
        "EmbeddingsLambdaArn": {
            "Type": "String",
            "AllowedPattern": "^(|arn:aws:lambda:.*)$",
            "Description": "Optional: If EmbeddingsApi is LAMBDA, provide ARN for a Lambda function that takes JSON {\"inputtext\":\"string\"}, and returns JSON {\"embedding\":[...]}",
            "Default": ""
        },
        "EmbeddingsLambdaDimensions": {
            "Type": "Number",
            "MinValue": 1,
            "Description": "Optional: If EmbeddingsApi is LAMBDA, provide number of dimensions for embeddings returned by the EmbeddingsLambda function specified above.",
            "Default": 4096
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Authentication"
                    },
                    "Parameters": [
                        "Email",
                        "Username",
                        "PublicOrPrivate"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon Kendra Integration"
                    },
                    "Parameters": [
                        "DefaultKendraIndexId"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon OpenSearch Service"
                    },
                    "Parameters": [
                        "ElasticSearchNodeCount",
                        "Encryption",
                        "KibanaDashboardRetentionMinutes"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon LexV2"
                    },
                    "Parameters": [
                        "LexV2BotLocaleIds"
                    ]
                },
                {
                    "Label": {
                        "default": "Semantic Search with Embeddings"
                    },
                    "Parameters": [
                        "EmbeddingsApi",
                        "EmbeddingsSagemakerEndpoint",
                        "SagemakerInitialInstanceCount",
                        "EmbeddingsLambdaArn",
                        "EmbeddingsLambdaDimensions"
                    ]
                },
                {
                    "Label": {
                        "default": "Miscellaneous"
                    },
                    "Parameters": [
                        "LexBotVersion",
                        "InstallLexResponseBots",
                        "FulfillmentConcurrency",
                        "XraySetting"
                    ]
                }
            ]
        },
        "AWS::CloudFormation::Designer": {
            "92c95ec5-f36d-4086-8d81-a1690583c506": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 390
                },
                "z": 1,
                "embeds": []
            },
            "b520d708-c27f-432f-9d14-bfde7c591fe7": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 510
                },
                "z": 1,
                "embeds": []
            },
            "1d64a2f9-ad4f-4773-ad12-43c46cf178f0": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1530,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "5e996c6f-02d1-4836-b2a9-27091b1046cd"
                ]
            },
            "e475da09-d5d5-482e-97d2-eb9fae320a55": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 630
                },
                "z": 1,
                "embeds": []
            },
            "1e3803d6-be2c-43cc-9e46-05d0a4c8512c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1530,
                    "y": 810
                },
                "z": 1,
                "embeds": []
            },
            "aef10afb-c078-4038-bdb4-41073d35f4f1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1650,
                    "y": 1020
                },
                "z": 1,
                "embeds": []
            },
            "a95bbe2c-5705-45bc-a43f-c348d2377a88": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1650,
                    "y": 1140
                },
                "z": 1,
                "embeds": []
            },
            "3c921695-58d1-4bbd-bd17-624c9deb6781": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1650,
                    "y": 1260
                },
                "z": 1,
                "embeds": []
            },
            "4bf9b9cd-8409-47e1-b37f-2fdf8d5afc55": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1560,
                    "y": 1380
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "3c921695-58d1-4bbd-bd17-624c9deb6781"
                ]
            },
            "95b4b419-c0d0-4e05-b1fa-84f72687fa91": {
                "size": {
                    "width": 150,
                    "height": 150
                },
                "position": {
                    "x": 1650,
                    "y": 810
                },
                "z": 1,
                "embeds": []
            },
            "15b79b22-8c78-4e71-b862-da447f2d2532": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 360,
                    "y": 1470
                },
                "z": 1,
                "embeds": [
                    "aa4f4acc-ccd0-483a-a9fd-50c2d6ce6c86"
                ]
            },
            "aa4f4acc-ccd0-483a-a9fd-50c2d6ce6c86": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 390,
                    "y": 1530
                },
                "z": 2,
                "parent": "15b79b22-8c78-4e71-b862-da447f2d2532",
                "embeds": [],
                "iscontainedinside": [
                    "15b79b22-8c78-4e71-b862-da447f2d2532",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "75cab832-7ead-4c19-8afc-0c4ebb9bb392": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 60,
                    "y": 1470
                },
                "z": 1,
                "embeds": [
                    "936d678a-8536-4458-8b43-3f1ebabf98d2"
                ]
            },
            "936d678a-8536-4458-8b43-3f1ebabf98d2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 1530
                },
                "z": 2,
                "parent": "75cab832-7ead-4c19-8afc-0c4ebb9bb392",
                "embeds": [],
                "iscontainedinside": [
                    "75cab832-7ead-4c19-8afc-0c4ebb9bb392",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "b720141d-49f2-4b5d-9d51-15db2c556c69": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1350,
                    "y": 990
                },
                "z": 1,
                "embeds": [
                    "981ca2a5-af09-4c81-a4dd-4fbf4013ce7a"
                ]
            },
            "0ed95d8b-618f-422f-b3b1-3a093b895ab5": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1260,
                    "y": 1290
                },
                "z": 1,
                "embeds": [
                    "6db309fc-ff7d-459e-b9bb-1942ffe82ec3"
                ]
            },
            "4da75463-5355-40e6-8d76-91d918c83442": {
                "size": {
                    "width": 330,
                    "height": 240
                },
                "position": {
                    "x": 60,
                    "y": 870
                },
                "z": 1,
                "embeds": [
                    "40d0d60f-5ed6-4099-90ee-bc6a357b6c89",
                    "c755cad5-25cc-4057-84f2-0220e67a5e9f"
                ]
            },
            "ca243504-43a5-4b66-918b-9dea7ba9bb97": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 960,
                    "y": 1290
                },
                "z": 1,
                "embeds": [
                    "1822dbd1-5bae-40c0-9752-dfa6d57144c3"
                ]
            },
            "5beb5105-5d30-4b7c-a41e-1dc1f58ecd9f": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 660,
                    "y": 1290
                },
                "z": 1,
                "embeds": [
                    "e7b94409-fea8-44b6-9dbf-a657cc651949"
                ]
            },
            "981ca2a5-af09-4c81-a4dd-4fbf4013ce7a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 1050
                },
                "z": 2,
                "parent": "b720141d-49f2-4b5d-9d51-15db2c556c69",
                "embeds": [],
                "iscontainedinside": [
                    "b720141d-49f2-4b5d-9d51-15db2c556c69",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "0261d26a-9e13-409d-a41b-7ed20d477f1b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1680,
                    "y": 1380
                },
                "z": 1,
                "embeds": []
            },
            "73832b8d-0d7f-43b5-a74d-4f31f98c572d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1560,
                    "y": 1500
                },
                "z": 1,
                "embeds": []
            },
            "bda560a5-9c0e-410a-9d17-a2051ec76d08": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1680,
                    "y": 1500
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "73832b8d-0d7f-43b5-a74d-4f31f98c572d"
                ]
            },
            "1822dbd1-5bae-40c0-9752-dfa6d57144c3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 990,
                    "y": 1350
                },
                "z": 2,
                "parent": "ca243504-43a5-4b66-918b-9dea7ba9bb97",
                "embeds": [],
                "iscontainedinside": [
                    "ca243504-43a5-4b66-918b-9dea7ba9bb97",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "e56ca30c-4097-4fe9-9b1b-a2349b4df45a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 1590
                },
                "z": 1,
                "embeds": []
            },
            "7473643e-e201-4f30-ae7b-b467ffc2b54c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 1590
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e56ca30c-4097-4fe9-9b1b-a2349b4df45a"
                ]
            },
            "6db309fc-ff7d-459e-b9bb-1942ffe82ec3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1290,
                    "y": 1350
                },
                "z": 2,
                "parent": "0ed95d8b-618f-422f-b3b1-3a093b895ab5",
                "embeds": [],
                "iscontainedinside": [
                    "0ed95d8b-618f-422f-b3b1-3a093b895ab5",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "27673428-2b40-4457-9ff0-2b6c7d539c1a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 1590
                },
                "z": 1,
                "embeds": []
            },
            "b46868cf-61ec-482d-97c5-3d50756e66dc": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1020,
                    "y": 1590
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "27673428-2b40-4457-9ff0-2b6c7d539c1a"
                ]
            },
            "e13dbe91-9a20-4949-ad21-a85f8dd5723f": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1230,
                    "y": 690
                },
                "z": 1,
                "embeds": [
                    "52e7a0c5-fe3b-475d-a434-a275bdefd85e"
                ]
            },
            "638121b4-3c9e-4642-ae39-5590229d6557": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1230,
                    "y": 390
                },
                "z": 1,
                "embeds": [
                    "dd98758b-749c-44c0-bc83-c0e364a05402"
                ]
            },
            "dc2fc332-e5fa-4859-9de2-7a95d010aec4": {
                "size": {
                    "width": 330,
                    "height": 240
                },
                "position": {
                    "x": 840,
                    "y": 690
                },
                "z": 1,
                "embeds": [
                    "b179f181-f09f-4fea-900b-8c14388f409c",
                    "0d7a11a9-fbc5-4770-b5d0-2c262a75adfc"
                ]
            },
            "dd98758b-749c-44c0-bc83-c0e364a05402": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 450
                },
                "z": 2,
                "parent": "638121b4-3c9e-4642-ae39-5590229d6557",
                "embeds": [],
                "iscontainedinside": [
                    "638121b4-3c9e-4642-ae39-5590229d6557",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "64adda58-5c5b-4f89-958e-ddf80d6f1917": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1230,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "29ac4544-65fd-46a1-9aa6-cdc6019c3808"
                ]
            },
            "3243f321-916b-4667-8e4f-13f3e1426acd": {
                "size": {
                    "width": 330,
                    "height": 330
                },
                "position": {
                    "x": 450,
                    "y": 480
                },
                "z": 1,
                "embeds": [
                    "3612b4d5-136f-4e2a-8727-c53daf0e7f80",
                    "413d6427-9890-430a-b788-109f7d581fe3",
                    "d3fb4dba-aa1b-407e-91f9-3e05090d0a5b"
                ]
            },
            "29ac4544-65fd-46a1-9aa6-cdc6019c3808": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 150
                },
                "z": 2,
                "parent": "64adda58-5c5b-4f89-958e-ddf80d6f1917",
                "embeds": [],
                "iscontainedinside": [
                    "64adda58-5c5b-4f89-958e-ddf80d6f1917",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "7cbdae2f-c3c6-4ff5-900a-255830d941e2": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 360,
                    "y": 1170
                },
                "z": 1,
                "embeds": [
                    "48abd652-cae9-4835-82b3-2c002131786f"
                ]
            },
            "78c574bc-cf77-405d-961c-754e1319f707": {
                "size": {
                    "width": 330,
                    "height": 330
                },
                "position": {
                    "x": 60,
                    "y": 480
                },
                "z": 1,
                "embeds": [
                    "1ea99709-ca0c-41c3-824a-365a879accaf",
                    "a0752d24-921a-47b9-aded-570e8ee9bb37",
                    "37558116-4a76-4b0d-b412-28a44454dfb2"
                ]
            },
            "48abd652-cae9-4835-82b3-2c002131786f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 390,
                    "y": 1230
                },
                "z": 2,
                "parent": "7cbdae2f-c3c6-4ff5-900a-255830d941e2",
                "embeds": [],
                "iscontainedinside": [
                    "7cbdae2f-c3c6-4ff5-900a-255830d941e2",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "52e7a0c5-fe3b-475d-a434-a275bdefd85e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 750
                },
                "z": 2,
                "parent": "e13dbe91-9a20-4949-ad21-a85f8dd5723f",
                "embeds": [],
                "iscontainedinside": [
                    "e13dbe91-9a20-4949-ad21-a85f8dd5723f",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "5286b7f2-ae3c-447b-82cc-a7cfcc2d71d1": {
                "size": {
                    "width": 150,
                    "height": 150
                },
                "position": {
                    "x": 1530,
                    "y": 600
                },
                "z": 1,
                "embeds": []
            },
            "56b5a0a6-0dae-4924-b5af-71d0708490d6": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 60,
                    "y": 1170
                },
                "z": 1,
                "embeds": [
                    "b1c87c29-7d80-4cf4-8afb-08c132b9c1ce"
                ]
            },
            "f87ea78e-05a6-4566-aca4-3678dcc3e339": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 1050,
                    "y": 990
                },
                "z": 1,
                "embeds": [
                    "5e93412a-a0c4-495c-9201-3bf91cb1be63"
                ]
            },
            "27081b01-5019-4472-baa8-2758248ab788": {
                "size": {
                    "width": 150,
                    "height": 150
                },
                "position": {
                    "x": 1530,
                    "y": 390
                },
                "z": 1,
                "embeds": []
            },
            "30dfe987-9305-49c3-a74b-f1f14bc603d8": {
                "size": {
                    "width": 330,
                    "height": 240
                },
                "position": {
                    "x": 840,
                    "y": 390
                },
                "z": 1,
                "embeds": [
                    "ce64a44c-229a-4adb-9c90-2b6d4a4af53b",
                    "0e1a457b-c221-4b83-8a26-84b2ded77278"
                ]
            },
            "ce64a44c-229a-4adb-9c90-2b6d4a4af53b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 870,
                    "y": 450
                },
                "z": 2,
                "parent": "30dfe987-9305-49c3-a74b-f1f14bc603d8",
                "embeds": [],
                "iscontainedinside": [
                    "30dfe987-9305-49c3-a74b-f1f14bc603d8",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "0e1a457b-c221-4b83-8a26-84b2ded77278": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 990,
                    "y": 450
                },
                "z": 2,
                "parent": "30dfe987-9305-49c3-a74b-f1f14bc603d8",
                "embeds": [],
                "iscontainedinside": [
                    "30dfe987-9305-49c3-a74b-f1f14bc603d8",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "41d996de-38e6-458a-9c76-f40c4988b8be": {
                "size": {
                    "width": 330,
                    "height": 330
                },
                "position": {
                    "x": 450,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "94be28b7-072b-4440-b285-d961b9ecc526",
                    "4a6e22a0-3e58-494a-8268-75fffa0fbb27",
                    "608faa2c-f58c-4e30-b395-f48e83e8a918"
                ]
            },
            "47bbf103-9813-4900-8719-b0595b7b1961": {
                "size": {
                    "width": 330,
                    "height": 330
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "d7979701-f282-4b03-9904-ff25624d864b",
                    "f8397f36-e8f7-4bc3-b19b-286355211bc9",
                    "2adadbae-0ae7-4fde-aaac-5e08fc8ec46a"
                ]
            },
            "5e996c6f-02d1-4836-b2a9-27091b1046cd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1560,
                    "y": 150
                },
                "z": 2,
                "parent": "1d64a2f9-ad4f-4773-ad12-43c46cf178f0",
                "embeds": [],
                "iscontainedinside": [
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "cf7c1554-4834-478c-a648-a9cf2aba88b8": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 750,
                    "y": 990
                },
                "z": 1,
                "embeds": [
                    "651cde8c-cd38-486b-a10e-2f2bf9ffa2e8"
                ]
            },
            "ab7eba18-ec85-43c2-b927-c1f26ccab666": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1140,
                    "y": 1590
                },
                "z": 1,
                "embeds": []
            },
            "64ccb2fd-c480-4379-8137-0ed40f3eb852": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 1590
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "ab7eba18-ec85-43c2-b927-c1f26ccab666"
                ]
            },
            "73d8d999-fff3-40d4-84f1-ef30f11fef84": {
                "size": {
                    "width": 330,
                    "height": 240
                },
                "position": {
                    "x": 840,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "8f24d135-a67d-4359-92a2-86b570062ae8",
                    "f39e8963-97c5-4a84-86f2-e4ff28f1674f"
                ]
            },
            "ee1b87a2-d3ac-4bb0-8fd9-4e29f1338bbe": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 450,
                    "y": 870
                },
                "z": 1,
                "embeds": [
                    "94df9477-99c3-4723-af65-370e31882b10"
                ]
            },
            "d2cebb90-1aff-4421-92b8-9d6809d553ab": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 1590
                },
                "z": 1,
                "embeds": []
            },
            "20088d09-155d-434e-ac36-e84c463a5721": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1500,
                    "y": 1620
                },
                "z": 1,
                "embeds": []
            },
            "780398c6-0a46-4313-aacb-5cf8e30222f9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1620,
                    "y": 1620
                },
                "z": 1,
                "embeds": []
            },
            "385efd5e-7de2-4841-9c44-2e5f2ac84d2a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 1620
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "780398c6-0a46-4313-aacb-5cf8e30222f9"
                ]
            },
            "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 1710
                },
                "z": 1,
                "embeds": []
            },
            "75ed6f7b-4ef9-4833-abed-cec3701fa20d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 1710
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b"
                ]
            },
            "06c3f59b-b123-4bec-b347-98980f06215e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 1710
                },
                "z": 1,
                "embeds": []
            },
            "a1787bf7-dd1f-44ee-9158-05059054efe4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1020,
                    "y": 1710
                },
                "z": 1,
                "embeds": []
            },
            "beb38a7c-e2aa-4da0-a6d0-b181f48d0b29": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1140,
                    "y": 1710
                },
                "z": 1,
                "embeds": []
            },
            "d2918228-6ed5-4823-9587-f51d7ec3fa4d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 1710
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b"
                ]
            },
            "9a50e1a4-cbce-4ad7-aa50-dbb0fdcf7463": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 1710
                },
                "z": 1,
                "embeds": []
            },
            "a073cdc1-d606-42e8-add3-f083e5aefc86": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1500,
                    "y": 1740
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "9a50e1a4-cbce-4ad7-aa50-dbb0fdcf7463"
                ]
            },
            "f7ec26c4-8edc-49ce-8b45-3908122bed95": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1620,
                    "y": 1740
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b"
                ]
            },
            "c44b68bc-a871-4fcd-878f-beb27d300e94": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 1740
                },
                "z": 1,
                "embeds": []
            },
            "5f8be794-e72d-427c-9826-d01d35387393": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1830,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "bc162986-4ac6-4133-8e5e-84d173060579": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1830,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "5f8be794-e72d-427c-9826-d01d35387393"
                ]
            },
            "486b5a7c-040d-4f4d-8676-65f516dfd609": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1770,
                    "y": 1020
                },
                "z": 1,
                "embeds": []
            },
            "a70bc487-9856-47d8-a3eb-f9c9e048bb34": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1770,
                    "y": 1140
                },
                "z": 1,
                "embeds": []
            },
            "d25d3b56-a6e5-49fd-bae0-4aa740789673": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1770,
                    "y": 1260
                },
                "z": 1,
                "embeds": []
            },
            "117fe27c-7bf1-4bb3-aa74-16697d448128": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1800,
                    "y": 1380
                },
                "z": 1,
                "embeds": []
            },
            "3d3a2786-37de-482d-9d34-f323a585a028": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 1770
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "aef10afb-c078-4038-bdb4-41073d35f4f1"
                ]
            },
            "a6c8e241-ac8a-489d-8139-13eb9a9c9e70": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 1770
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "1e3803d6-be2c-43cc-9e46-05d0a4c8512c"
                ]
            },
            "91467aef-65f4-487c-b092-85af6913773d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 1770
                },
                "z": 1,
                "embeds": []
            },
            "a5dd8880-bc8c-40c0-80fe-f217e0eb06af": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 1770
                },
                "z": 1,
                "embeds": []
            },
            "85644894-3f1c-4163-bc74-d13cd46b08d6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 1830
                },
                "z": 1,
                "embeds": []
            },
            "938b7f8b-5eff-4d0f-8a16-c848be62e8cd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "903be98b-43af-4e66-8025-bfd4efb1a398": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "2445dbdb-2b0b-4030-bb82-86c9378c3a75": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 570
                },
                "z": 1,
                "embeds": []
            },
            "c2210951-cb46-4648-8ef5-4b9f392281d3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 690
                },
                "z": 1,
                "embeds": []
            },
            "850fe11e-8c5e-42c4-9a6d-b6d0d5d781c9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 810
                },
                "z": 1,
                "embeds": []
            },
            "cb03039d-72f9-4e01-b366-e695610310d8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1890,
                    "y": 930
                },
                "z": 1,
                "embeds": []
            },
            "da6d08b3-a009-42f9-a9b7-6d15bd8e3088": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1890,
                    "y": 1050
                },
                "z": 1,
                "embeds": []
            },
            "b13feed9-251b-471e-903c-b0c0f709ab33": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1890,
                    "y": 1170
                },
                "z": 1,
                "embeds": []
            },
            "6703b069-bf85-4ab0-8b11-0ffd525f6cd8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1920,
                    "y": 1290
                },
                "z": 1,
                "embeds": []
            },
            "94350c82-2095-4377-8816-1afdbe98355c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1920,
                    "y": 1410
                },
                "z": 1,
                "embeds": []
            },
            "85cd0c78-dd36-41b4-93d8-8808ddc16a13": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1920,
                    "y": 1530
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "94350c82-2095-4377-8816-1afdbe98355c"
                ]
            },
            "94be28b7-072b-4440-b285-d961b9ecc526": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 150
                },
                "z": 2,
                "parent": "41d996de-38e6-458a-9c76-f40c4988b8be",
                "embeds": [],
                "iscontainedinside": [
                    "41d996de-38e6-458a-9c76-f40c4988b8be",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "53aba874-8b8b-473c-844e-56f43f6fe398": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 1650
                },
                "z": 1,
                "embeds": []
            },
            "c291cfb7-a0ff-4c9c-a389-15a48200be18": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 1770
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b"
                ]
            },
            "f8827275-5752-4821-85f2-6473d55a6ee4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1500,
                    "y": 1860
                },
                "z": 1,
                "embeds": []
            },
            "f11444d7-0fa2-4569-b481-da94735d60d3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1620,
                    "y": 1860
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6c6d3f28-d653-4dc3-9c4e-b44d2230b55b"
                ]
            },
            "b36d0c4a-a04b-45d8-ab9a-37e2ba6a975a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 1860
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "f11444d7-0fa2-4569-b481-da94735d60d3"
                ]
            },
            "b9231642-e7ae-4994-92ae-aa3a521003a8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "660e6812-b64a-4547-af5b-104d33182ebe": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "8cf721d8-9643-4b7c-84de-e04fde95ba02": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "8102d47e-64ee-4ac3-911f-24cee1169f32": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "b20ad570-2cbb-40d8-b5d2-180a6fb979c4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "f36d1f49-46cf-4a6f-8d4b-f6365172a6cd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "26553302-68ab-4395-a8d3-abbb5798d9d2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1950,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "508313fe-7473-4473-8bb5-2f27954215f5": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1950,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "ce7af09f-7679-4fe5-8a30-20056c783fef": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "aab9d408-f986-4eac-9163-7610594afa4c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "fd166669-969a-4842-aeb4-5391ddccca42": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 570
                },
                "z": 1,
                "embeds": []
            },
            "d8c5cfe8-48bd-4f29-b8e8-685866f0f702": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 690
                },
                "z": 1,
                "embeds": []
            },
            "3300f8e6-33cc-4493-a53b-31984fdab1af": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 810
                },
                "z": 1,
                "embeds": []
            },
            "06e536ce-9fda-47db-a459-bc990df41330": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2010,
                    "y": 930
                },
                "z": 1,
                "embeds": []
            },
            "61a7ac2d-fd47-4eeb-9763-5a84553d5b6c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2010,
                    "y": 1050
                },
                "z": 1,
                "embeds": []
            },
            "0be66d5c-df14-49d4-a84e-72d19a97c6d1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2010,
                    "y": 1170
                },
                "z": 1,
                "embeds": []
            },
            "fd7f0247-e3ad-49de-a8d4-68cf1bf2a63e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 1650
                },
                "z": 1,
                "embeds": []
            },
            "94e6ef2e-161b-4e48-88ab-c33d519e804f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 1770
                },
                "z": 1,
                "embeds": []
            },
            "1a290603-d345-441e-ae7c-f13caf40cba3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "93380540-e74f-4b74-9bbb-2bfbf6d0bac3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 1950
                },
                "z": 1,
                "embeds": []
            },
            "b1c87c29-7d80-4cf4-8afb-08c132b9c1ce": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 1230
                },
                "z": 2,
                "parent": "56b5a0a6-0dae-4924-b5af-71d0708490d6",
                "embeds": [],
                "iscontainedinside": [
                    "56b5a0a6-0dae-4924-b5af-71d0708490d6",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "ccf64149-8acf-4eb6-825e-3c915e5cc3a5": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 1950
                },
                "z": 1,
                "embeds": []
            },
            "5e93412a-a0c4-495c-9201-3bf91cb1be63": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1080,
                    "y": 1050
                },
                "z": 2,
                "parent": "f87ea78e-05a6-4566-aca4-3678dcc3e339",
                "embeds": [],
                "iscontainedinside": [
                    "f87ea78e-05a6-4566-aca4-3678dcc3e339",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "7b23f91e-1d6c-411e-83a5-95f2a1f4dd10": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 1950
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "d2cebb90-1aff-4421-92b8-9d6809d553ab"
                ]
            },
            "d334d9e7-b4b8-4817-aa22-b473dfeec937": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1020,
                    "y": 1950
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "7b23f91e-1d6c-411e-83a5-95f2a1f4dd10"
                ]
            },
            "bfd47919-25fb-4f7f-bc35-8d1e8e0fbeb1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1140,
                    "y": 1950
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "d334d9e7-b4b8-4817-aa22-b473dfeec937"
                ]
            },
            "7fa6a505-988c-4056-8cbd-37ae1240e4ab": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 1950
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "7b23f91e-1d6c-411e-83a5-95f2a1f4dd10"
                ]
            },
            "11d1a7d3-96dc-4694-8c44-baf33fd31d28": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 1950
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "7b23f91e-1d6c-411e-83a5-95f2a1f4dd10"
                ]
            },
            "a6a768ae-b5ed-4a2e-b2a8-d0ace5ad867b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1500,
                    "y": 1980
                },
                "z": 1,
                "embeds": []
            },
            "1ea99709-ca0c-41c3-824a-365a879accaf": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 540
                },
                "z": 2,
                "parent": "78c574bc-cf77-405d-961c-754e1319f707",
                "embeds": [],
                "iscontainedinside": [
                    "78c574bc-cf77-405d-961c-754e1319f707",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "a0752d24-921a-47b9-aded-570e8ee9bb37": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 210,
                    "y": 540
                },
                "z": 2,
                "parent": "78c574bc-cf77-405d-961c-754e1319f707",
                "embeds": [],
                "iscontainedinside": [
                    "78c574bc-cf77-405d-961c-754e1319f707",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "37558116-4a76-4b0d-b412-28a44454dfb2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 660
                },
                "z": 2,
                "parent": "78c574bc-cf77-405d-961c-754e1319f707",
                "embeds": [],
                "iscontainedinside": [
                    "78c574bc-cf77-405d-961c-754e1319f707",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "0f015e88-4d42-4a28-a79b-f87395d205b4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1620,
                    "y": 1980
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "a6a768ae-b5ed-4a2e-b2a8-d0ace5ad867b"
                ]
            },
            "9229897d-88d9-4717-9898-6e4b8c37a2d7": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 1980
                },
                "z": 1,
                "embeds": []
            },
            "b179f181-f09f-4fea-900b-8c14388f409c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 870,
                    "y": 750
                },
                "z": 2,
                "parent": "dc2fc332-e5fa-4859-9de2-7a95d010aec4",
                "embeds": [],
                "iscontainedinside": [
                    "dc2fc332-e5fa-4859-9de2-7a95d010aec4",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "0d7a11a9-fbc5-4770-b5d0-2c262a75adfc": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 990,
                    "y": 750
                },
                "z": 2,
                "parent": "dc2fc332-e5fa-4859-9de2-7a95d010aec4",
                "embeds": [],
                "iscontainedinside": [
                    "dc2fc332-e5fa-4859-9de2-7a95d010aec4",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "c1d5df9a-6c16-421d-9c6a-a01cfc131567": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 2010
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "9229897d-88d9-4717-9898-6e4b8c37a2d7"
                ]
            },
            "f9ff417d-7c60-48d0-9118-63171d4bc371": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 2010
                },
                "z": 1,
                "embeds": []
            },
            "3612b4d5-136f-4e2a-8727-c53daf0e7f80": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 540
                },
                "z": 2,
                "parent": "3243f321-916b-4667-8e4f-13f3e1426acd",
                "embeds": [],
                "iscontainedinside": [
                    "3243f321-916b-4667-8e4f-13f3e1426acd",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "413d6427-9890-430a-b788-109f7d581fe3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 600,
                    "y": 540
                },
                "z": 2,
                "parent": "3243f321-916b-4667-8e4f-13f3e1426acd",
                "embeds": [],
                "iscontainedinside": [
                    "3243f321-916b-4667-8e4f-13f3e1426acd",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "d3fb4dba-aa1b-407e-91f9-3e05090d0a5b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 660
                },
                "z": 2,
                "parent": "3243f321-916b-4667-8e4f-13f3e1426acd",
                "embeds": [],
                "iscontainedinside": [
                    "3243f321-916b-4667-8e4f-13f3e1426acd",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "cd89b9cb-6ad5-498b-967f-7eb8b7ea5089": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 2010
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "f9ff417d-7c60-48d0-9118-63171d4bc371"
                ]
            },
            "d86f03fc-94f9-4d82-bfbd-40ef651c586d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 2010
                },
                "z": 1,
                "embeds": []
            },
            "5d23799b-4088-4179-a595-343b9e159fd2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 2010
                },
                "z": 1,
                "embeds": []
            },
            "40d0d60f-5ed6-4099-90ee-bc6a357b6c89": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 930
                },
                "z": 2,
                "parent": "4da75463-5355-40e6-8d76-91d918c83442",
                "embeds": [],
                "iscontainedinside": [
                    "4da75463-5355-40e6-8d76-91d918c83442",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "c755cad5-25cc-4057-84f2-0220e67a5e9f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 210,
                    "y": 930
                },
                "z": 2,
                "parent": "4da75463-5355-40e6-8d76-91d918c83442",
                "embeds": [],
                "iscontainedinside": [
                    "4da75463-5355-40e6-8d76-91d918c83442",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "e7b94409-fea8-44b6-9dbf-a657cc651949": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 690,
                    "y": 1350
                },
                "z": 2,
                "parent": "5beb5105-5d30-4b7c-a41e-1dc1f58ecd9f",
                "embeds": [],
                "iscontainedinside": [
                    "5beb5105-5d30-4b7c-a41e-1dc1f58ecd9f",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "abe834e9-6c5e-4caf-a5f5-14c42b5caf36": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 2010
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "7b23f91e-1d6c-411e-83a5-95f2a1f4dd10"
                ]
            },
            "68ef1bc9-97eb-4cc4-9714-da7748c195cd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 2010
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "abe834e9-6c5e-4caf-a5f5-14c42b5caf36"
                ]
            },
            "1ae4dd16-1189-4a2f-99e6-81a294b3338a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2070,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "5d23799b-4088-4179-a595-343b9e159fd2"
                ]
            },
            "d4ba9b60-1d70-4dbc-833d-de60187a3983": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2070,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "f8c589fb-4c1a-4c51-a9da-2399817eab61": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "27290f8f-4d57-4548-b850-055d5632ce4c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "ad31912d-949c-4ebf-a5ac-ded46573db01": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 570
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "27290f8f-4d57-4548-b850-055d5632ce4c"
                ]
            },
            "5ca6d044-43f2-4b6a-83ef-f217f0a6b2db": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 690
                },
                "z": 1,
                "embeds": []
            },
            "09efa5ec-6886-4a5f-ab7f-3261aee89f29": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 810
                },
                "z": 1,
                "embeds": []
            },
            "0f398051-f63a-46ee-a461-bc4a1b076297": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2040,
                    "y": 1290
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "09efa5ec-6886-4a5f-ab7f-3261aee89f29",
                    "938b7f8b-5eff-4d0f-8a16-c848be62e8cd"
                ]
            },
            "152e3d83-fcc9-4ba9-995a-171ddb8e1516": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2040,
                    "y": 1410
                },
                "z": 1,
                "embeds": []
            },
            "79b619fc-e9bd-4881-b219-6c5b4a31d464": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2040,
                    "y": 1530
                },
                "z": 1,
                "embeds": []
            },
            "a27305e6-f226-4cc1-8ba3-17e01eae8ade": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 1650
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "79b619fc-e9bd-4881-b219-6c5b4a31d464"
                ]
            },
            "d7979701-f282-4b03-9904-ff25624d864b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 150
                },
                "z": 2,
                "parent": "47bbf103-9813-4900-8719-b0595b7b1961",
                "embeds": [],
                "iscontainedinside": [
                    "47bbf103-9813-4900-8719-b0595b7b1961",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "f8397f36-e8f7-4bc3-b19b-286355211bc9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 210,
                    "y": 150
                },
                "z": 2,
                "parent": "47bbf103-9813-4900-8719-b0595b7b1961",
                "embeds": [],
                "iscontainedinside": [
                    "47bbf103-9813-4900-8719-b0595b7b1961",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "2adadbae-0ae7-4fde-aaac-5e08fc8ec46a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 270
                },
                "z": 2,
                "parent": "47bbf103-9813-4900-8719-b0595b7b1961",
                "embeds": [],
                "iscontainedinside": [
                    "47bbf103-9813-4900-8719-b0595b7b1961",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "4a6e22a0-3e58-494a-8268-75fffa0fbb27": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 600,
                    "y": 150
                },
                "z": 2,
                "parent": "41d996de-38e6-458a-9c76-f40c4988b8be",
                "embeds": [],
                "iscontainedinside": [
                    "41d996de-38e6-458a-9c76-f40c4988b8be",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "608faa2c-f58c-4e30-b395-f48e83e8a918": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 270
                },
                "z": 2,
                "parent": "41d996de-38e6-458a-9c76-f40c4988b8be",
                "embeds": [],
                "iscontainedinside": [
                    "41d996de-38e6-458a-9c76-f40c4988b8be",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "651cde8c-cd38-486b-a10e-2f2bf9ffa2e8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 1050
                },
                "z": 2,
                "parent": "cf7c1554-4834-478c-a648-a9cf2aba88b8",
                "embeds": [],
                "iscontainedinside": [
                    "cf7c1554-4834-478c-a648-a9cf2aba88b8",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "2918e8fb-5b18-41e8-ba2b-c14abeb9f72a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 1770
                },
                "z": 1,
                "embeds": []
            },
            "e40c2435-8af7-4566-a35a-27b729b9ee39": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "b606f946-cc69-4caf-911d-a19b87989558": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 2010
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e40c2435-8af7-4566-a35a-27b729b9ee39"
                ]
            },
            "462af1b2-4a97-4be1-b776-ab96101644db": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 2070
                },
                "z": 1,
                "embeds": []
            },
            "5afa7c9f-fcb3-46ee-b21d-ecba2ede4547": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 2070
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e40c2435-8af7-4566-a35a-27b729b9ee39"
                ]
            },
            "70da94a5-8a87-498a-a92f-840379ca616c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 2070
                },
                "z": 1,
                "embeds": []
            },
            "72555aa3-2ca6-4791-b16a-65aa280d2ab2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1020,
                    "y": 2070
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "70da94a5-8a87-498a-a92f-840379ca616c"
                ]
            },
            "59a7dfde-f6b9-4218-be09-dc15e0622fdb": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1140,
                    "y": 2070
                },
                "z": 1,
                "embeds": []
            },
            "70332a35-aaff-4638-87fa-27e7e6e50aec": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 2070
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "59a7dfde-f6b9-4218-be09-dc15e0622fdb"
                ]
            },
            "94df9477-99c3-4723-af65-370e31882b10": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 930
                },
                "z": 2,
                "parent": "ee1b87a2-d3ac-4bb0-8fd9-4e29f1338bbe",
                "embeds": [],
                "iscontainedinside": [
                    "ee1b87a2-d3ac-4bb0-8fd9-4e29f1338bbe",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "162ffa8d-a20c-452e-8c9a-15d5f4e6b1e0": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 2070
                },
                "z": 1,
                "embeds": []
            },
            "eb14f197-e688-430b-8f0a-fb3e1d96d2a5": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1500,
                    "y": 2100
                },
                "z": 1,
                "embeds": []
            },
            "75f5f79c-63b2-49e8-9718-a1d41ce3eeba": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1620,
                    "y": 2100
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "162ffa8d-a20c-452e-8c9a-15d5f4e6b1e0"
                ]
            },
            "2e3733c1-ab6c-44e7-8828-1fc64cbbecbe": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1740,
                    "y": 2100
                },
                "z": 1,
                "embeds": []
            },
            "ef1a00f4-764c-43b4-bc60-4e1a28ee6f85": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2190,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "d527f0c6-a588-424f-a0ca-deef30a3972c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2130,
                    "y": 930
                },
                "z": 1,
                "embeds": []
            },
            "3ca9ddfe-6aea-463f-a520-88fdb0a7b93a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2130,
                    "y": 1050
                },
                "z": 1,
                "embeds": []
            },
            "9428dafe-e244-4060-ab1a-b4666f287458": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2130,
                    "y": 1170
                },
                "z": 1,
                "embeds": []
            },
            "6c38762d-da8c-4dc8-bfc3-ba17f065cd35": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2160,
                    "y": 1290
                },
                "z": 1,
                "embeds": []
            },
            "199c1cc4-105d-4203-9c51-32370d1a519a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2160,
                    "y": 1410
                },
                "z": 1,
                "embeds": []
            },
            "77ddff9a-5db6-4198-9cce-0e4f1a84cdc3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2160,
                    "y": 1530
                },
                "z": 1,
                "embeds": []
            },
            "1de15630-14cd-438b-966d-7b470189afa6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 2130
                },
                "z": 1,
                "embeds": []
            },
            "52fba9c7-ac3c-4ca0-a6df-7637dd3dbe58": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 2130
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "c291cfb7-a0ff-4c9c-a389-15a48200be18"
                ]
            },
            "8cfa9ace-fb35-4740-927e-c0667aec69cb": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 2130
                },
                "z": 1,
                "embeds": []
            },
            "0696515f-9923-42d3-9a7e-bfdd749960c0": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 2130
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "f11444d7-0fa2-4569-b481-da94735d60d3"
                ]
            },
            "d3b55f54-600d-4897-ace3-282dbc76e9af": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 2130
                },
                "z": 1,
                "embeds": []
            },
            "bee52267-1cef-4ed5-89cf-6a64774aaf4e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1860,
                    "y": 2130
                },
                "z": 1,
                "embeds": []
            },
            "1214e3a8-060d-4912-b648-9a88bce5e75e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1980,
                    "y": 2130
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "bee52267-1cef-4ed5-89cf-6a64774aaf4e"
                ]
            },
            "de6479b0-82c0-4376-99e1-8d0cc68a0efb": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2100,
                    "y": 2130
                },
                "z": 1,
                "embeds": []
            },
            "9eb2963d-8c4c-42ec-a960-d17ea33b1599": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 2190
                },
                "z": 1,
                "embeds": []
            },
            "d85e75a6-0095-4144-a69c-9ecc254e70df": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 2190
                },
                "z": 1,
                "embeds": []
            },
            "6ac6a4f4-7129-4214-b51d-16fff7f7ef6e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 2190
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "d3b55f54-600d-4897-ace3-282dbc76e9af"
                ]
            },
            "8dba156f-7653-4c1f-aeca-ae0964cc60d6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1020,
                    "y": 2190
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "6ac6a4f4-7129-4214-b51d-16fff7f7ef6e"
                ]
            },
            "cc32ab59-ae32-400e-bb2b-836367ca2290": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1140,
                    "y": 2190
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "6ac6a4f4-7129-4214-b51d-16fff7f7ef6e"
                ]
            },
            "ef68d184-ac52-4702-9e66-f1b2dc3c996e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1260,
                    "y": 2190
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "cc32ab59-ae32-400e-bb2b-836367ca2290"
                ]
            },
            "344ca0ac-be91-4b23-8d57-f84783748407": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1380,
                    "y": 2190
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "cc32ab59-ae32-400e-bb2b-836367ca2290"
                ]
            },
            "edb606ab-4216-41f2-a927-a1c0faf21d27": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "b9db5891-cba2-4244-8c2c-31d09f5da994": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "ab95fbe7-7129-4669-b050-10ebcb5fedab": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 570
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "b9db5891-cba2-4244-8c2c-31d09f5da994"
                ]
            },
            "8f24d135-a67d-4359-92a2-86b570062ae8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 870,
                    "y": 150
                },
                "z": 2,
                "parent": "73d8d999-fff3-40d4-84f1-ef30f11fef84",
                "embeds": [],
                "iscontainedinside": [
                    "73d8d999-fff3-40d4-84f1-ef30f11fef84",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "b6f74567-9e74-4321-82ab-9553061967ce": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 690
                },
                "z": 1,
                "embeds": []
            },
            "67f02f83-c456-4534-aa25-5b4d9af5ffc3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 810
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "b6f74567-9e74-4321-82ab-9553061967ce"
                ]
            },
            "f4449756-e71c-4763-8f09-c86102742d2f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2250,
                    "y": 930
                },
                "z": 1,
                "embeds": []
            },
            "5fce7ca8-adde-40d5-b9f4-b4c86d3af515": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2250,
                    "y": 1050
                },
                "z": 1,
                "embeds": []
            },
            "9ebd490a-cfea-46e5-948f-7f57b89d2133": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2250,
                    "y": 1170
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "5fce7ca8-adde-40d5-b9f4-b4c86d3af515"
                ]
            },
            "76403546-9c54-4cd6-8aed-cd62abf6a05e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2280,
                    "y": 1290
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "f7ec26c4-8edc-49ce-8b45-3908122bed95"
                ]
            },
            "98bdb09d-3f69-4e07-88e6-6a1ca6af0992": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2280,
                    "y": 1410
                },
                "z": 1,
                "embeds": []
            },
            "27a3f9e0-8e54-4f07-8db2-d76294607829": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2280,
                    "y": 1530
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "98bdb09d-3f69-4e07-88e6-6a1ca6af0992"
                ]
            },
            "f39e8963-97c5-4a84-86f2-e4ff28f1674f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 990,
                    "y": 150
                },
                "z": 2,
                "parent": "73d8d999-fff3-40d4-84f1-ef30f11fef84",
                "embeds": [],
                "iscontainedinside": [
                    "73d8d999-fff3-40d4-84f1-ef30f11fef84",
                    "1d64a2f9-ad4f-4773-ad12-43c46cf178f0"
                ]
            },
            "ae5a57e6-1f64-499b-bd53-385e9dc499bf": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 1650
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "94df9477-99c3-4723-af65-370e31882b10",
                    "f39e8963-97c5-4a84-86f2-e4ff28f1674f",
                    "8f24d135-a67d-4359-92a2-86b570062ae8",
                    "651cde8c-cd38-486b-a10e-2f2bf9ffa2e8",
                    "5e996c6f-02d1-4836-b2a9-27091b1046cd",
                    "608faa2c-f58c-4e30-b395-f48e83e8a918",
                    "4a6e22a0-3e58-494a-8268-75fffa0fbb27",
                    "2adadbae-0ae7-4fde-aaac-5e08fc8ec46a",
                    "f8397f36-e8f7-4bc3-b19b-286355211bc9",
                    "94be28b7-072b-4440-b285-d961b9ecc526",
                    "d7979701-f282-4b03-9904-ff25624d864b",
                    "0e1a457b-c221-4b83-8a26-84b2ded77278",
                    "ce64a44c-229a-4adb-9c90-2b6d4a4af53b",
                    "5e93412a-a0c4-495c-9201-3bf91cb1be63",
                    "b1c87c29-7d80-4cf4-8afb-08c132b9c1ce",
                    "52e7a0c5-fe3b-475d-a434-a275bdefd85e",
                    "48abd652-cae9-4835-82b3-2c002131786f",
                    "37558116-4a76-4b0d-b412-28a44454dfb2",
                    "a0752d24-921a-47b9-aded-570e8ee9bb37",
                    "1ea99709-ca0c-41c3-824a-365a879accaf",
                    "29ac4544-65fd-46a1-9aa6-cdc6019c3808",
                    "d3fb4dba-aa1b-407e-91f9-3e05090d0a5b",
                    "413d6427-9890-430a-b788-109f7d581fe3",
                    "3612b4d5-136f-4e2a-8727-c53daf0e7f80",
                    "dd98758b-749c-44c0-bc83-c0e364a05402",
                    "0d7a11a9-fbc5-4770-b5d0-2c262a75adfc",
                    "b179f181-f09f-4fea-900b-8c14388f409c",
                    "981ca2a5-af09-4c81-a4dd-4fbf4013ce7a",
                    "1822dbd1-5bae-40c0-9752-dfa6d57144c3",
                    "e7b94409-fea8-44b6-9dbf-a657cc651949",
                    "6db309fc-ff7d-459e-b9bb-1942ffe82ec3",
                    "c755cad5-25cc-4057-84f2-0220e67a5e9f",
                    "40d0d60f-5ed6-4099-90ee-bc6a357b6c89",
                    "936d678a-8536-4458-8b43-3f1ebabf98d2",
                    "aa4f4acc-ccd0-483a-a9fd-50c2d6ce6c86",
                    "27a3f9e0-8e54-4f07-8db2-d76294607829",
                    "1214e3a8-060d-4912-b648-9a88bce5e75e",
                    "70332a35-aaff-4638-87fa-27e7e6e50aec",
                    "72555aa3-2ca6-4791-b16a-65aa280d2ab2",
                    "b606f946-cc69-4caf-911d-a19b87989558",
                    "a27305e6-f226-4cc1-8ba3-17e01eae8ade",
                    "385efd5e-7de2-4841-9c44-2e5f2ac84d2a",
                    "b46868cf-61ec-482d-97c5-3d50756e66dc",
                    "7473643e-e201-4f30-ae7b-b467ffc2b54c",
                    "bda560a5-9c0e-410a-9d17-a2051ec76d08",
                    "85cd0c78-dd36-41b4-93d8-8808ddc16a13"
                ]
            },
            "b2febf9d-b15e-4f4d-8d2a-34b062a68987": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 1770
                },
                "z": 1,
                "embeds": []
            },
            "145d25ce-e4ce-4689-a1c5-209b934665b3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 1890
                },
                "z": 1,
                "embeds": []
            },
            "379117f3-8435-4e2a-afb5-273b5ee3c23c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 2010
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "1a290603-d345-441e-ae7c-f13caf40cba3"
                ]
            },
            "1b338411-97c5-44fb-a9c6-b96c6532964d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 2220,
                    "y": 2130
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "27290f8f-4d57-4548-b850-055d5632ce4c",
                    "379117f3-8435-4e2a-afb5-273b5ee3c23c"
                ]
            }
        }
    }
}